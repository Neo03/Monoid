
==================== FINAL INTERFACE ====================
2017-10-13 09:10:15.833292031 UTC

interface Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB:Comp 8002
  interface hash: 8edb8e229f5c9ce5f528a034b370c971
  ABI hash: b114e20f057bc56535d76e486af429cb
  export-list hash: 72288694645e06fcbd13e78fb01f714d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Comp.compAssoc
  Comp.Comp{Comp.Comp unComp}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 0e953baf64c505f1557b2f8788d63173
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
0ea34f471a8531c88d7a841429184e4e
  $fArbitraryComp ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary a) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Comp.Comp a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U(U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dCoArbitrary :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Comp.Comp a)
                  (Comp.$fArbitraryComp_$carbitrary @ a $dCoArbitrary $dArbitrary)
                  (Comp.$fArbitraryComp_$cshrink @ a $dCoArbitrary $dArbitrary) -}
1d547d5b282c78a9f147da46c4ce1f13
  $fArbitraryComp1 ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary a) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> a -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,1*U(1*U,A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dCoArbitrary :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Arbitrary.$fArbitrary(->)1
                   @ a
                   @ a
                   $dCoArbitrary
                   $dArbitrary
                   (case eta
                           `cast`
                         (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww1
                           ww2
                           ww3
                           ww4 of ww7 { (#,#) ww8 ww9 ->
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } })
                   eta1) -}
0ea34f471a8531c88d7a841429184e4e
  $fArbitraryComp_$carbitrary ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary a) =>
    Test.QuickCheck.Gen.Gen (Comp.Comp a)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,1*U(1*U,A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Comp.$fArbitraryComp1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.CoArbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] (Comp.N:Comp[0] <a>_R))) -}
0ea34f471a8531c88d7a841429184e4e
  $fArbitraryComp_$cshrink ::
    (Test.QuickCheck.Arbitrary.CoArbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary a) =>
    Comp.Comp a -> [Comp.Comp a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dCoArbitrary :: Test.QuickCheck.Arbitrary.CoArbitrary a)
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: Comp.Comp a) ->
                 GHC.Types.[] @ (Comp.Comp a)) -}
0ea34f471a8531c88d7a841429184e4e
  $fSemigroupComp ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (Comp.Comp a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dSemigroup :: Data.Semigroup.Semigroup a).
                  @ (Comp.Comp a)
                  (Comp.$fSemigroupComp_$c<> @ a $dSemigroup)
                  (Comp.$fSemigroupComp_$csconcat @ a $dSemigroup)
                  (Comp.$fSemigroupComp_$cstimes @ a $dSemigroup) -}
0ea34f471a8531c88d7a841429184e4e
  $fSemigroupComp1 ::
    Data.Semigroup.Semigroup a => Comp.Comp a -> Comp.Comp a -> a -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   (ds :: Comp.Comp a)
                   (ds1 :: Comp.Comp a)
                   (eta :: a) ->
                 Data.Semigroup.$fSemigroup(->)_$c<>
                   @ a
                   @ a
                   $dSemigroup
                   ds `cast` (Comp.N:Comp[0] <a>_R)
                   ds1 `cast` (Comp.N:Comp[0] <a>_R)
                   eta) -}
0ea34f471a8531c88d7a841429184e4e
  $fSemigroupComp_$c<> ::
    Data.Semigroup.Semigroup a =>
    Comp.Comp a -> Comp.Comp a -> Comp.Comp a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Comp.$fSemigroupComp1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Semigroup.Semigroup a>_R
                 ->_R <Comp.Comp a>_R
                 ->_R <Comp.Comp a>_R
                 ->_R Sym (Comp.N:Comp[0] <a>_R)) -}
0ea34f471a8531c88d7a841429184e4e
  $fSemigroupComp_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (Comp.Comp a) -> Comp.Comp a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.List.NonEmpty.NonEmpty (Comp.Comp a)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Comp.$w$csconcat @ a w ww1 ww2 }) -}
0ea34f471a8531c88d7a841429184e4e
  $fSemigroupComp_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b. GHC.Real.Integral b => b -> Comp.Comp a -> Comp.Comp a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
0ea34f471a8531c88d7a841429184e4e
  $fShowComp :: GHC.Show.Show (Comp.Comp a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Comp.Comp a)
                  (Comp.$fShowComp_$cshowsPrec @ a)
                  (Comp.$fShowComp_$cshow @ a)
                  (Comp.$fShowComp_$cshowList @ a) -}
4b61f66edcb5eedac1ca3b95072b248b
  $fShowComp1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Comp {unComp = <function>}"#) -}
0ea34f471a8531c88d7a841429184e4e
  $fShowComp_$cshow :: Comp.Comp a -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Comp.Comp a) -> Comp.$fShowComp1) -}
0ea34f471a8531c88d7a841429184e4e
  $fShowComp_$cshowList :: [Comp.Comp a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ls :: [Comp.Comp a]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Comp.Comp a)
                   (\ (x :: Comp.Comp a) (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Char @ b c n Comp.$fShowComp1)
                      s1)
                   ls
                   s) -}
0ea34f471a8531c88d7a841429184e4e
  $fShowComp_$cshowsPrec ::
    GHC.Types.Int -> Comp.Comp a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,A><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Comp.Comp a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Comp.$fShowComp1)
                   s) -}
16174771a59563982d22eb25000458f4
  $tc'Comp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6746829159613672019##
                   12016481145244389643##
                   Comp.$trModule
                   Comp.$tc'Comp1) -}
e5e4312fa4e84188945990b24a0b6eac
  $tc'Comp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Comp"#) -}
cf177060d162661daae0039773c0d448
  $tcComp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10494005204006833363##
                   6925259935534363315##
                   Comp.$trModule
                   Comp.$trModule1) -}
e32fbec432c7d3ebd6b536c71f5b047d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Comp.$trModule2 Comp.$trModule1) -}
ffa70f95b9d12f26745b6940961814d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Comp"#) -}
540d774692b139c8437b089d312daac6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB"#) -}
0ea34f471a8531c88d7a841429184e4e
  $w$csconcat ::
    Data.Semigroup.Semigroup a =>
    Comp.Comp a -> [Comp.Comp a] -> Comp.Comp a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (ww :: Comp.Comp a)
                   (ww1 :: [Comp.Comp a]) ->
                 letrec {
                   go :: Comp.Comp a -> [Comp.Comp a] -> Comp.Comp a
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b :: Comp.Comp a) (ds1 :: [Comp.Comp a]) ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> let {
                            ds :: Comp.Comp a = go c cs
                          } in
                          (\ (eta :: a) ->
                           Data.Semigroup.$fSemigroup(->)_$c<>
                             @ a
                             @ a
                             w
                             b `cast` (Comp.N:Comp[0] <a>_R)
                             ds `cast` (Comp.N:Comp[0] <a>_R)
                             eta)
                            `cast`
                          (Sym (Comp.N:Comp[0] <a>_R)) }
                 } in
                 go ww ww1) -}
0ea34f471a8531c88d7a841429184e4e
  newtype Comp a = Comp {unComp :: a -> a}
33a3900575807ad763edfc61a392960e
  compAssoc ::
    Comp.Comp GHC.Base.String
    -> Comp.Comp GHC.Base.String
    -> Comp.Comp GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S),C(U)><L,C(U)><L,C(U)><L,U>,
     Unfolding: (\ (a :: Comp.Comp GHC.Base.String)
                   (b :: Comp.Comp GHC.Base.String)
                   (c :: Comp.Comp GHC.Base.String)
                   (d :: GHC.Base.String) ->
                 GHC.Base.eqString
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (a `cast` (Comp.N:Comp[0] <[GHC.Types.Char]>_R) d)
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (b `cast` (Comp.N:Comp[0] <[GHC.Types.Char]>_R) d)
                         (c `cast` (Comp.N:Comp[0] <[GHC.Types.Char]>_R) d)))
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (a `cast` (Comp.N:Comp[0] <[GHC.Types.Char]>_R) d)
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (b `cast` (Comp.N:Comp[0] <[GHC.Types.Char]>_R) d)
                         (c `cast` (Comp.N:Comp[0] <[GHC.Types.Char]>_R) d)))) -}
98d55909c1790ec9fd3feb2e5799b4bc
  unComp :: Comp.Comp a -> a -> a
  RecSel Left Comp.Comp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Comp.unComp1
                  `cast`
                (forall (a :: <*>_N). <Comp.Comp a>_R ->_R Comp.N:Comp[0] <a>_R) -}
80f9a0d7775551c3e7df60d52c075923
  unComp1 :: Comp.Comp a -> Comp.Comp a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Comp.Comp a) -> ds) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Comp.Comp]
  = Comp.$fArbitraryComp
instance [safe] Data.Semigroup.Semigroup [Comp.Comp]
  = Comp.$fSemigroupComp
instance [safe] GHC.Show.Show [Comp.Comp] = Comp.$fShowComp
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

