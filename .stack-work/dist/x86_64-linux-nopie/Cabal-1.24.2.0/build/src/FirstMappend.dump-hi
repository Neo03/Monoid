
==================== FINAL INTERFACE ====================
2017-10-13 09:10:15.581606082 UTC

interface Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB:FirstMappend 8002
  interface hash: 8bf8de5249fbe068071b2798b1107861
  ABI hash: fd69208796004f9abb4638ceba259388
  export-list hash: 5af5d1a14065173f59237fd2a6828ef3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  FirstMappend.firstMappend
  FirstMappend.monoidAssoc
  FirstMappend.monoidLeftIdentity
  FirstMappend.monoidRightIdentity
  FirstMappend.First'{FirstMappend.First' getFirst'}
  FirstMappend.FirstMappend
  FirstMappend.Optional{FirstMappend.Nada FirstMappend.Only}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 0e953baf64c505f1557b2f8788d63173
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Gen f58893849fb1d103be122a409ecfc455
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
3a05698645f5f2d4ec5cf64f97bfea1e
  $fArbitraryFirst' ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (FirstMappend.First' a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fArbitraryFirst'_$carbitrary @ a $dArbitrary)
                  (FirstMappend.$fArbitraryFirst'_$cshrink @ a $dArbitrary) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fArbitraryFirst'1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FirstMappend.First' a
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   x :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (FirstMappend.First' a)
                    (GHC.Types.:
                       @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
                       (FirstMappend.$fArbitraryFirst'3 @ a)
                       (GHC.Types.:
                          @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
                          (FirstMappend.$fArbitraryFirst'2,
                           let {
                             x1 :: FirstMappend.Optional a = FirstMappend.Only @ a x
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds2 :: GHC.Types.Int) ->
                            x1)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     (FirstMappend.N:First'[0] <a>_N))))
                          (GHC.Types.[]
                             @ (GHC.Types.Int,
                                Test.QuickCheck.Gen.Gen (FirstMappend.First' a))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <FirstMappend.First' a>_R)
                   (case ds1 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
6f2c17d7404a680696f1958ecf2a7816
  $fArbitraryFirst'2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fArbitraryFirst'3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ a ->
                 (FirstMappend.$fArbitraryFirst'2,
                  (FirstMappend.$fArbitraryFirst'4 @ a)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            (FirstMappend.N:First'[0] <a>_N))))) -}
b5156c6a734c0c975ec21dee88775808
  $fArbitraryFirst'4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FirstMappend.Optional a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 FirstMappend.Nada @ a) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fArbitraryFirst'_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (FirstMappend.First' a)
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fArbitraryFirst'1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <FirstMappend.First' a>_R)) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fArbitraryFirst'_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    FirstMappend.First' a -> [FirstMappend.First' a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: FirstMappend.First' a) ->
                 GHC.Types.[] @ (FirstMappend.First' a)) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fEqFirst' ::
    GHC.Classes.Eq a => GHC.Classes.Eq (FirstMappend.First' a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fEqFirst'_$c== @ a $dEq)
                  (FirstMappend.$fEqFirst'_$c/= @ a $dEq) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fEqFirst'_$c/= ::
    GHC.Classes.Eq a =>
    FirstMappend.First' a -> FirstMappend.First' a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fEqFirst'_$c/=1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (FirstMappend.N:First'[0]) <a>_N
                 ->_R Sym (FirstMappend.N:First'[0]) <a>_N
                 ->_R <GHC.Types.Bool>_R) -}
5b0cd54b7fe8e23d535add6cfab885eb
  $fEqFirst'_$c/=1 ::
    GHC.Classes.Eq a =>
    FirstMappend.Optional a
    -> FirstMappend.Optional a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: FirstMappend.Optional a)
                   (b :: FirstMappend.Optional a) ->
                 case a1 of wild {
                   FirstMappend.Nada
                   -> case b of wild1 {
                        FirstMappend.Nada -> GHC.Types.False
                        FirstMappend.Only ipv -> GHC.Types.True }
                   FirstMappend.Only a2
                   -> case b of wild1 {
                        FirstMappend.Nada -> GHC.Types.True
                        FirstMappend.Only b1
                        -> case GHC.Classes.== @ a $dEq a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fEqFirst'_$c== ::
    GHC.Classes.Eq a =>
    FirstMappend.First' a -> FirstMappend.First' a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fEqFirst'_$c==1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (FirstMappend.N:First'[0]) <a>_N
                 ->_R Sym (FirstMappend.N:First'[0]) <a>_N
                 ->_R <GHC.Types.Bool>_R) -}
5b0cd54b7fe8e23d535add6cfab885eb
  $fEqFirst'_$c==1 ::
    GHC.Classes.Eq a =>
    FirstMappend.Optional a
    -> FirstMappend.Optional a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: FirstMappend.Optional a)
                   (ds1 :: FirstMappend.Optional a) ->
                 case ds of wild {
                   FirstMappend.Nada
                   -> case ds1 of wild1 {
                        FirstMappend.Nada -> GHC.Types.True
                        FirstMappend.Only ipv -> GHC.Types.False }
                   FirstMappend.Only a1
                   -> case ds1 of wild1 {
                        FirstMappend.Nada -> GHC.Types.False
                        FirstMappend.Only b1 -> GHC.Classes.== @ a $dEq a1 b1 } }) -}
5b0cd54b7fe8e23d535add6cfab885eb
  $fEqOptional ::
    GHC.Classes.Eq a => GHC.Classes.Eq (FirstMappend.Optional a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (FirstMappend.Optional a)
                  (FirstMappend.$fEqFirst'_$c==1 @ a $dEq)
                  (FirstMappend.$fEqFirst'_$c/=1 @ a $dEq) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fMonoidFirst' :: GHC.Base.Monoid (FirstMappend.First' a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (FirstMappend.First' a)
                  (FirstMappend.Nada @ a)
                    `cast`
                  (Sym (FirstMappend.N:First'[0]) <a>_N)
                  (FirstMappend.$fMonoidFirst'_$cmappend @ a)
                  (FirstMappend.$fMonoidFirst'_$cmconcat @ a) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fMonoidFirst'1 :: [FirstMappend.First' a] -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fMonoidFirst'_$cmappend ::
    FirstMappend.First' a
    -> FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True) FirstMappend.firstMappend -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fMonoidFirst'_$cmconcat ::
    [FirstMappend.First' a] -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a (eta :: [FirstMappend.First' a]) ->
                 FirstMappend.$fMonoidFirst'1 @ a eta) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fShowFirst' ::
    GHC.Show.Show a => GHC.Show.Show (FirstMappend.First' a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fShowFirst'_$cshowsPrec @ a $dShow)
                  (FirstMappend.$fShowFirst'_$cshow @ a $dShow)
                  (FirstMappend.$fShowFirst'_$cshowList @ a $dShow) -}
8ccaa295a273d3e575f0a3d53a79d76d
  $fShowFirst'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
82812be9972da721bc834b67076ad32f
  $fShowFirst'10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'8
                   FirstMappend.$fShowFirst'9) -}
5ab7b97d8bfe82a57f2263c4fe3af10c
  $fShowFirst'2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
fc8c9e39f7676d7bdd42436e02995e6a
  $fShowFirst'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getFirst' = "#) -}
8ccd94b411dc6f936cd21a7e910f6fe5
  $fShowFirst'4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "First' {"#) -}
fb0562321164b35ba76cb521054229a5
  $fShowFirst'5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Only "#) -}
7575a0074ee0725a473aac4469f7c884
  $fShowFirst'6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
b892cd96552e2eab7310c7138308c91e
  $fShowFirst'7 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'8) -}
68cd59a7ada43eb396c5d13bbe31ed96
  $fShowFirst'8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nada"#) -}
80311c5c5b7a26558587810df471c47d
  $fShowFirst'9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fShowFirst'_$cshow ::
    GHC.Show.Show a => FirstMappend.First' a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: FirstMappend.First' a) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'4
                   (GHC.Base.++
                      @ GHC.Types.Char
                      FirstMappend.$fShowFirst'3
                      (case x `cast` (FirstMappend.N:First'[0] <a>_N) of wild {
                         FirstMappend.Nada -> FirstMappend.$fShowFirst'10
                         FirstMappend.Only b1
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              FirstMappend.$fShowFirst'5
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow
                                 FirstMappend.$fShowFirst'6
                                 b1
                                 FirstMappend.$fShowFirst'9) }))) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fShowFirst'_$cshowList ::
    GHC.Show.Show a => [FirstMappend.First' a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [FirstMappend.First' a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (FirstMappend.First' a)
                   (FirstMappend.$fShowFirst'_$cshowsPrec
                      @ a
                      $dShow
                      FirstMappend.$fShowFirst'1)
                   eta
                   eta1) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $fShowFirst'_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> FirstMappend.First' a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: FirstMappend.First' a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FirstMappend.$w$cshowsPrec @ a w ww1 w2 }) -}
5b0cd54b7fe8e23d535add6cfab885eb
  $fShowFirst'_$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Types.Int -> FirstMappend.Optional a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (ds1 :: FirstMappend.Optional a) ->
                 case ds1 of wild {
                   FirstMappend.Nada -> FirstMappend.$fShowFirst'7
                   FirstMappend.Only b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow FirstMappend.$fShowFirst'6 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char FirstMappend.$fShowFirst'5 (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                FirstMappend.$fShowFirst'5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x1))) } } }) -}
5b0cd54b7fe8e23d535add6cfab885eb
  $fShowOptional ::
    GHC.Show.Show a => GHC.Show.Show (FirstMappend.Optional a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (FirstMappend.Optional a)
                  (FirstMappend.$fShowFirst'_$cshowsPrec1 @ a $dShow)
                  (FirstMappend.$fShowOptional_$cshow @ a $dShow)
                  (FirstMappend.$fShowOptional_$cshowList @ a $dShow) -}
5b0cd54b7fe8e23d535add6cfab885eb
  $fShowOptional_$cshow ::
    GHC.Show.Show a => FirstMappend.Optional a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: FirstMappend.Optional a) ->
                 case x of wild {
                   FirstMappend.Nada -> FirstMappend.$fShowFirst'8
                   FirstMappend.Only b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        FirstMappend.$fShowFirst'5
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           FirstMappend.$fShowFirst'6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
5b0cd54b7fe8e23d535add6cfab885eb
  $fShowOptional_$cshowList ::
    GHC.Show.Show a => [FirstMappend.Optional a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [FirstMappend.Optional a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (FirstMappend.Optional a)
                   (FirstMappend.$fShowFirst'_$cshowsPrec1
                      @ a
                      $dShow
                      FirstMappend.$fShowFirst'1)
                   eta
                   eta1) -}
96f5d77ded7ab878015c8f186c95b03b
  $tc'First' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16058034785310579307##
                   4104069311878790363##
                   FirstMappend.$trModule
                   FirstMappend.$tc'First'1) -}
5dc773edb4c3d1c955d00a2e1f306f38
  $tc'First'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'First'"#) -}
eacf8a79ab649d0fb97b2126cae4f6da
  $tc'Nada :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13355347039710950121##
                   38692764361737565##
                   FirstMappend.$trModule
                   FirstMappend.$tc'Nada1) -}
8a2bc5aed252f939a1df7b9516ab932e
  $tc'Nada1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nada"#) -}
1ced7b1c639b522b9699f0283e004135
  $tc'Only :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9436127297109988511##
                   11227545588656754659##
                   FirstMappend.$trModule
                   FirstMappend.$tc'Only1) -}
b22c3583f6e23c0e22496c618dfe9915
  $tc'Only1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Only"#) -}
c00785c9640e48c4fc4f4423390f47c3
  $tcFirst' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1828568189717818567##
                   6326693139643859799##
                   FirstMappend.$trModule
                   FirstMappend.$tcFirst'1) -}
f1f12b7458d35ae63538aa6c7b8739b8
  $tcFirst'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "First'"#) -}
2394ad2ce426551d8aa1dffa5d0cd869
  $tcOptional :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15043369526099268190##
                   13380016099243897640##
                   FirstMappend.$trModule
                   FirstMappend.$tcOptional1) -}
e08810b2852245df68f5542a03bacefb
  $tcOptional1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Optional"#) -}
e1e993466642f9af9b3dedfcb4859492
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FirstMappend.$trModule2
                   FirstMappend.$trModule1) -}
4e0f61c3b6095aa8fcb331b613785b19
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FirstMappend"#) -}
cde00cb26d3a94881edd1f4c485729f6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB"#) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> FirstMappend.First' a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: FirstMappend.First' a) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = FirstMappend.$fShowFirst'_$cshowsPrec1
                       @ a
                       w
                       FirstMappend.$fShowFirst'1
                       w1 `cast` (FirstMappend.N:First'[0] <a>_N)
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       FirstMappend.$fShowFirst'4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          FirstMappend.$fShowFirst'3
                          (f (GHC.Base.++ @ GHC.Types.Char FirstMappend.$fShowFirst'2 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
3a05698645f5f2d4ec5cf64f97bfea1e
  newtype First' a = First' {getFirst' :: FirstMappend.Optional a}
3cee4ca8ed62ed11ac9ebccf40caa954
  type FirstMappend =
    FirstMappend.First' GHC.Base.String
    -> FirstMappend.First' GHC.Base.String
    -> FirstMappend.First' GHC.Base.String
    -> GHC.Types.Bool
5b0cd54b7fe8e23d535add6cfab885eb
  data Optional a = Nada | Only a
3a05698645f5f2d4ec5cf64f97bfea1e
  firstMappend ::
    FirstMappend.First' a
    -> FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ds :: FirstMappend.First' a)
                   (ds1 :: FirstMappend.First' a) ->
                 case ds `cast` (FirstMappend.N:First'[0] <a>_N) of wild {
                   FirstMappend.Nada -> ds1
                   FirstMappend.Only x
                   -> (FirstMappend.Only @ a x)
                        `cast`
                      (Sym (FirstMappend.N:First'[0]) <a>_N) }) -}
7a04f91627bcdffdecea8c7ba0295bf7
  getFirst' :: FirstMappend.First' a -> FirstMappend.Optional a
  RecSel Left FirstMappend.First'
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.getFirst'1
                  `cast`
                (forall (a :: <*>_N).
                 <FirstMappend.First' a>_R ->_R FirstMappend.N:First'[0] <a>_N) -}
b5a6973e900ff23385838ee721e488dc
  getFirst'1 :: FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: FirstMappend.First' a) -> ds) -}
5d10ddad2bde890dba92d676d0771da3
  monoidAssoc ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend
                      @ m
                      $dMonoid
                      a
                      (GHC.Base.mappend @ m $dMonoid b c))
                   (GHC.Base.mappend
                      @ m
                      $dMonoid
                      (GHC.Base.mappend @ m $dMonoid a b)
                      c)) -}
233d0c16d6390921b36da2e505ffb580
  monoidLeftIdentity ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) => m -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (m1 :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend @ m $dMonoid m1 (GHC.Base.mempty @ m $dMonoid))
                   m1) -}
d2c386fc51c42d2c0cd63ab678c32365
  monoidRightIdentity ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) => m -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (m1 :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend @ m $dMonoid (GHC.Base.mempty @ m $dMonoid) m1)
                   m1) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [FirstMappend.First']
  = FirstMappend.$fArbitraryFirst'
instance [safe] GHC.Classes.Eq [FirstMappend.First']
  = FirstMappend.$fEqFirst'
instance [safe] GHC.Classes.Eq [FirstMappend.Optional]
  = FirstMappend.$fEqOptional
instance [safe] GHC.Base.Monoid [FirstMappend.First']
  = FirstMappend.$fMonoidFirst'
instance [safe] GHC.Show.Show [FirstMappend.First']
  = FirstMappend.$fShowFirst'
instance [safe] GHC.Show.Show [FirstMappend.Optional]
  = FirstMappend.$fShowOptional
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

