
==================== FINAL INTERFACE ====================
2017-10-13 09:10:13.324716073 UTC

interface Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB:Validation 8002
  interface hash: 10b8386f922bd7f6e313f245fbd5590b
  ABI hash: 864c3ac49b233221469e64477f1fc7f3
  export-list hash: 546eb44404175bc2b097c48bae616a7c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Validation.semigroupValidAssoc
  Validation.Validation{Validation.Failure Validation.Success}
  Validation.ValidationAssoc
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 0e953baf64c505f1557b2f8788d63173
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Gen f58893849fb1d103be122a409ecfc455
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
405aa3cedb36710e7934d6acd74cd1c3
  $fArbitraryValidation ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Validation.Validation a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Validation.Validation a b)
                  (Validation.$fArbitraryValidation_$carbitrary
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1)
                  (Validation.$fArbitraryValidation_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fArbitraryValidation1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Validation.Validation a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (Test.QuickCheck.Gen.elements
                    @ (Validation.Validation a b)
                    (GHC.Types.:
                       @ (Validation.Validation a b)
                       (Validation.Failure
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             (case ds1 of wild { (,) r1 r2 -> r1 })
                             eta1))
                       (GHC.Types.:
                          @ (Validation.Validation a b)
                          (Validation.Success
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                (case ds2 of wild { (,) r1 r2 -> r1 })
                                eta1))
                          (GHC.Types.[] @ (Validation.Validation a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Validation.Validation a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fArbitraryValidation_$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Validation.Validation a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Validation.$fArbitraryValidation1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Validation.Validation a b>_R)) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fArbitraryValidation_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Validation.Validation a b -> [Validation.Validation a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Validation.Validation a b) ->
                 GHC.Types.[] @ (Validation.Validation a b)) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fEqValidation ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Validation.Validation a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Validation.Validation a b)
                  (Validation.$fEqValidation_$c== @ a @ b $dEq $dEq1)
                  (Validation.$fEqValidation_$c/= @ a @ b $dEq $dEq1) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fEqValidation_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Validation.Validation a b
    -> Validation.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: Validation.Validation a b)
                   (b1 :: Validation.Validation a b) ->
                 case a1 of wild {
                   Validation.Failure a2
                   -> case b1 of wild1 {
                        Validation.Failure b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Validation.Success ipv -> GHC.Types.True }
                   Validation.Success a2
                   -> case b1 of wild1 {
                        Validation.Failure ipv -> GHC.Types.True
                        Validation.Success b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fEqValidation_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Validation.Validation a b
    -> Validation.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: Validation.Validation a b)
                   (ds1 :: Validation.Validation a b) ->
                 case ds of wild {
                   Validation.Failure a1
                   -> case ds1 of wild1 {
                        Validation.Failure b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        Validation.Success ipv -> GHC.Types.False }
                   Validation.Success a1
                   -> case ds1 of wild1 {
                        Validation.Failure ipv -> GHC.Types.False
                        Validation.Success b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fSemigroupValidation ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (Validation.Validation a b)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a).
                  @ (Validation.Validation a b)
                  (Validation.$fSemigroupValidation_$c<> @ a @ b $dSemigroup)
                  (Validation.$fSemigroupValidation_$csconcat @ a @ b $dSemigroup)
                  (Validation.$fSemigroupValidation_$cstimes @ a @ b $dSemigroup) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fSemigroupValidation_$c<> ::
    Data.Semigroup.Semigroup a =>
    Validation.Validation a b
    -> Validation.Validation a b -> Validation.Validation a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   (ds :: Validation.Validation a b)
                   (ds1 :: Validation.Validation a b) ->
                 case ds of wild {
                   Validation.Failure a1
                   -> case ds1 of wild1 {
                        Validation.Failure b1
                        -> Validation.Failure
                             @ a
                             @ b
                             (Data.Semigroup.<> @ a $dSemigroup a1 b1)
                        Validation.Success ipv -> wild }
                   Validation.Success ipv
                   -> case ds1 of wild1 {
                        Validation.Failure b1 -> wild1
                        Validation.Success ipv1 -> wild } }) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fSemigroupValidation_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (Validation.Validation a b)
    -> Validation.Validation a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.List.NonEmpty.NonEmpty (Validation.Validation a b)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Validation.$w$csconcat @ a @ b w ww1 ww2 }) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fSemigroupValidation_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Validation.Validation a b -> Validation.Validation a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
405aa3cedb36710e7934d6acd74cd1c3
  $fShowValidation ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Validation.Validation a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Validation.Validation a b)
                  (Validation.$fShowValidation_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Validation.$fShowValidation_$cshow @ a @ b $dShow $dShow1)
                  (Validation.$fShowValidation_$cshowList @ a @ b $dShow $dShow1) -}
e379a17fae270e0fb79d5d073c84a3ac
  $fShowValidation1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8a41faec2aa932965e853dd10db725a0
  $fShowValidation2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Success "#) -}
9cbc29e8e3f16496895bc3420fc10066
  $fShowValidation3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Failure "#) -}
a4c23c2ecf3238231bc109b5f90cd82c
  $fShowValidation4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fShowValidation_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Validation.Validation a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Validation.Validation a b) ->
                 case x of wild {
                   Validation.Failure b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Validation.$fShowValidation3
                        (GHC.Show.showsPrec
                           @ a
                           $dShow1
                           Validation.$fShowValidation4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Validation.Success b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Validation.$fShowValidation2
                        (GHC.Show.showsPrec
                           @ b
                           $dShow
                           Validation.$fShowValidation4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fShowValidation_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Validation.Validation a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Validation.Validation a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Validation.Validation a b)
                   (Validation.$fShowValidation_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Validation.$fShowValidation1)
                   eta
                   eta1) -}
405aa3cedb36710e7934d6acd74cd1c3
  $fShowValidation_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Validation.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Validation.Validation a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Validation.$w$cshowsPrec @ a @ b w w1 ww1 w3 }) -}
f2ca952643ac8907df88f6db80bc31ec
  $tc'Failure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8199295611869500541##
                   14141021084608895867##
                   Validation.$trModule
                   Validation.$tc'Failure1) -}
e645acde201e3863cd914b687801f61b
  $tc'Failure1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Failure"#) -}
3185abd2d651c3610195538a227dc01f
  $tc'Success :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4720621379004218877##
                   1875275442112724918##
                   Validation.$trModule
                   Validation.$tc'Success1) -}
563c9912dc335bb0d41a5dcacbe9d580
  $tc'Success1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Success"#) -}
5ae3a0b0d8294cbb521e8e9403cf1211
  $tcValidation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9462997484583835019##
                   2669286114320192980##
                   Validation.$trModule
                   Validation.$trModule1) -}
35a19bd314e417cdcd8f9155b9c21494
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Validation.$trModule2
                   Validation.$trModule1) -}
88b72c39f72ba3d6195e115792e1c4ec
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Validation"#) -}
eee20902b4e0eebf65be0f9125e024ba
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB"#) -}
405aa3cedb36710e7934d6acd74cd1c3
  $w$csconcat ::
    Data.Semigroup.Semigroup a =>
    Validation.Validation a b
    -> [Validation.Validation a b] -> Validation.Validation a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (ww :: Validation.Validation a b)
                   (ww1 :: [Validation.Validation a b]) ->
                 letrec {
                   go :: Validation.Validation a b
                         -> [Validation.Validation a b] -> Validation.Validation a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: Validation.Validation a b)
                       (ds1 :: [Validation.Validation a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> case b1 of wild {
                            Validation.Failure a1
                            -> case go c cs of wild2 {
                                 Validation.Failure b2
                                 -> Validation.Failure @ a @ b (Data.Semigroup.<> @ a w a1 b2)
                                 Validation.Success ipv -> wild }
                            Validation.Success ipv
                            -> case go c cs of wild2 {
                                 Validation.Failure b2 -> wild2
                                 Validation.Success ipv1 -> wild } } }
                 } in
                 go ww ww1) -}
405aa3cedb36710e7934d6acd74cd1c3
  $w$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> Validation.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Validation.Validation a b) ->
                 case w2 of wild {
                   Validation.Failure b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w1 Validation.$fShowValidation4 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Validation.$fShowValidation3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Validation.$fShowValidation3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Validation.Success b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w Validation.$fShowValidation4 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Validation.$fShowValidation2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Validation.$fShowValidation2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
405aa3cedb36710e7934d6acd74cd1c3
  data Validation a b = Failure a | Success b
b039f2284908c796494fce1ac0039513
  type ValidationAssoc =
    Validation.Validation GHC.Base.String GHC.Types.Ordering
    -> Validation.Validation GHC.Base.String GHC.Types.Ordering
    -> Validation.Validation GHC.Base.String GHC.Types.Ordering
    -> GHC.Types.Bool
f255b7e34129c07a9cb80c0e88a83b5c
  semigroupValidAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Validation.Validation]
  = Validation.$fArbitraryValidation
instance [safe] GHC.Classes.Eq [Validation.Validation]
  = Validation.$fEqValidation
instance [safe] Data.Semigroup.Semigroup [Validation.Validation]
  = Validation.$fSemigroupValidation
instance [safe] GHC.Show.Show [Validation.Validation]
  = Validation.$fShowValidation
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

