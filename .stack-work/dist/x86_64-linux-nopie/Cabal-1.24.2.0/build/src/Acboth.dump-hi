
==================== FINAL INTERFACE ====================
2017-10-13 09:10:17.073996562 UTC

interface Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB:Acboth 8002
  interface hash: 168520250db82768dd3cb48cc0307986
  ABI hash: 88ffd7e93e2938a1a6b0d284a156c314
  export-list hash: 9b05221053eba39dfb2ae1c9aee2a9d9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Acboth.semigroupAcbothAssoc
  Acboth.AcbothAssoc
  Acboth.AccumulateBoth{Acboth.AccumulateBoth}
  Acboth.Validation{Acboth.Failure Acboth.Success}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 0e953baf64c505f1557b2f8788d63173
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Gen f58893849fb1d103be122a409ecfc455
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
1eaf621636ad8ce7d6f4bfce8e68c770
  $fArbitraryAccumulateBoth ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Acboth.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Acboth.AccumulateBoth a b)
                  (Acboth.$fArbitraryAccumulateBoth_$carbitrary
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1)
                  (Acboth.$fArbitraryAccumulateBoth_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fArbitraryAccumulateBoth1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Acboth.AccumulateBoth a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (Test.QuickCheck.Gen.elements
                    @ (Acboth.AccumulateBoth a b)
                    (GHC.Types.:
                       @ (Acboth.AccumulateBoth a b)
                       (Acboth.Success
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             (case ds1 of wild { (,) r1 r2 -> r1 })
                             eta1))
                         `cast`
                       (Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N)
                       (GHC.Types.:
                          @ (Acboth.AccumulateBoth a b)
                          (Acboth.Failure
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                (case ds2 of wild { (,) r1 r2 -> r1 })
                                eta1))
                            `cast`
                          (Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N)
                          (GHC.Types.[] @ (Acboth.AccumulateBoth a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Acboth.AccumulateBoth a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fArbitraryAccumulateBoth_$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Acboth.AccumulateBoth a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Acboth.$fArbitraryAccumulateBoth1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Acboth.AccumulateBoth a b>_R)) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fArbitraryAccumulateBoth_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Acboth.AccumulateBoth a b -> [Acboth.AccumulateBoth a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Acboth.AccumulateBoth a b) ->
                 GHC.Types.[] @ (Acboth.AccumulateBoth a b)) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fEqAccumulateBoth ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (Acboth.AccumulateBoth a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq a)
                      ($dEq1 :: GHC.Classes.Eq b).
                  @ (Acboth.AccumulateBoth a b)
                  (Acboth.$fEqAccumulateBoth_$c== @ a @ b $dEq $dEq1)
                  (Acboth.$fEqAccumulateBoth_$c/= @ a @ b $dEq $dEq1) -}
eeab0ead5817e67311cb4d74af732035
  $fEqAccumulateBoth1 ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Acboth.Validation a b -> Acboth.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (eta :: Acboth.Validation a b)
                   (eta1 :: Acboth.Validation a b) ->
                 Acboth.$fEqAccumulateBoth_$c/=1 @ a @ b $dEq1 $dEq eta eta1) -}
288f7f414259177975f746c83726f9eb
  $fEqAccumulateBoth2 ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Acboth.Validation a b -> Acboth.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (eta :: Acboth.Validation a b)
                   (eta1 :: Acboth.Validation a b) ->
                 Acboth.$fEqAccumulateBoth_$c==1 @ a @ b $dEq1 $dEq eta eta1) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fEqAccumulateBoth_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Acboth.AccumulateBoth a b
    -> Acboth.AccumulateBoth a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Acboth.$fEqAccumulateBoth1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
599c874b4d7dd6ad26f2eb830885d4fc
  $fEqAccumulateBoth_$c/=1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Acboth.Validation a b -> Acboth.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: Acboth.Validation a b)
                   (b1 :: Acboth.Validation a b) ->
                 case a1 of wild {
                   Acboth.Success a2
                   -> case b1 of wild1 {
                        Acboth.Success b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Acboth.Failure ipv -> GHC.Types.True }
                   Acboth.Failure a2
                   -> case b1 of wild1 {
                        Acboth.Success ipv -> GHC.Types.True
                        Acboth.Failure b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fEqAccumulateBoth_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Acboth.AccumulateBoth a b
    -> Acboth.AccumulateBoth a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Acboth.$fEqAccumulateBoth2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
599c874b4d7dd6ad26f2eb830885d4fc
  $fEqAccumulateBoth_$c==1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Acboth.Validation a b -> Acboth.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: Acboth.Validation a b)
                   (ds1 :: Acboth.Validation a b) ->
                 case ds of wild {
                   Acboth.Success a1
                   -> case ds1 of wild1 {
                        Acboth.Success b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        Acboth.Failure ipv -> GHC.Types.False }
                   Acboth.Failure a1
                   -> case ds1 of wild1 {
                        Acboth.Success ipv -> GHC.Types.False
                        Acboth.Failure b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
599c874b4d7dd6ad26f2eb830885d4fc
  $fEqValidation ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Acboth.Validation a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Acboth.Validation a b)
                  (Acboth.$fEqAccumulateBoth_$c==1 @ a @ b $dEq $dEq1)
                  (Acboth.$fEqAccumulateBoth_$c/=1 @ a @ b $dEq $dEq1) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fSemigroupAccumulateBoth ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.Semigroup.Semigroup (Acboth.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b).
                  @ (Acboth.AccumulateBoth a b)
                  (Acboth.$fSemigroupAccumulateBoth_$c<>
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (Acboth.$fSemigroupAccumulateBoth_$csconcat
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (Acboth.$fSemigroupAccumulateBoth_$cstimes
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fSemigroupAccumulateBoth_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Acboth.AccumulateBoth a b
    -> Acboth.AccumulateBoth a b -> Acboth.AccumulateBoth a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   ($dSemigroup1 :: Data.Semigroup.Semigroup b)
                   (ds :: Acboth.AccumulateBoth a b)
                   (ds1 :: Acboth.AccumulateBoth a b) ->
                 case ds `cast` (Acboth.N:AccumulateBoth[0] <a>_N <b>_N) of wild {
                   Acboth.Success a1
                   -> case ds1
                             `cast`
                           (Acboth.N:AccumulateBoth[0] <a>_N <b>_N) of wild1 {
                        Acboth.Success b1
                        -> (Acboth.Success
                              @ a
                              @ b
                              (Data.Semigroup.<> @ a $dSemigroup a1 b1))
                             `cast`
                           (Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N)
                        Acboth.Failure ipv
                        -> (Acboth.Failure @ a @ b ipv)
                             `cast`
                           (Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N) }
                   Acboth.Failure a1
                   -> case ds1
                             `cast`
                           (Acboth.N:AccumulateBoth[0] <a>_N <b>_N) of wild1 {
                        Acboth.Success ipv
                        -> (Acboth.Failure @ a @ b a1)
                             `cast`
                           (Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N)
                        Acboth.Failure b1
                        -> (Acboth.Failure
                              @ a
                              @ b
                              (Data.Semigroup.<> @ b $dSemigroup1 a1 b1))
                             `cast`
                           (Sym (Acboth.N:AccumulateBoth[0]) <a>_N <b>_N) } }) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fSemigroupAccumulateBoth_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.List.NonEmpty.NonEmpty (Acboth.AccumulateBoth a b)
    -> Acboth.AccumulateBoth a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.List.NonEmpty.NonEmpty (Acboth.AccumulateBoth a b)) ->
                 case w2 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Acboth.$w$csconcat @ a @ b w w1 ww1 ww2 }) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fSemigroupAccumulateBoth_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Acboth.AccumulateBoth a b -> Acboth.AccumulateBoth a b
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U> -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fShowAccumulateBoth ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Show.Show (Acboth.AccumulateBoth a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show a)
                      ($dShow1 :: GHC.Show.Show b).
                  @ (Acboth.AccumulateBoth a b)
                  (Acboth.$fShowAccumulateBoth_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Acboth.$fShowAccumulateBoth_$cshow @ a @ b $dShow $dShow1)
                  (Acboth.$fShowAccumulateBoth_$cshowList @ a @ b $dShow $dShow1) -}
46674169a402a442606e1e1cb21597af
  $fShowAccumulateBoth1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
640f94720d00ba6bb55958527dce499b
  $fShowAccumulateBoth2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccumulateBoth "#) -}
76fa73c5e4b1ba2d04d778f792a8f502
  $fShowAccumulateBoth3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Failure "#) -}
a6750d4a4a10594b1540301e6e1d2ebc
  $fShowAccumulateBoth4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Success "#) -}
c5dd746315710a0a9b47f21ab97035b9
  $fShowAccumulateBoth5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
0645b157bf471a7b813ffa05728f7481
  $fShowAccumulateBoth6 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fShowAccumulateBoth_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    Acboth.AccumulateBoth a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (x :: Acboth.AccumulateBoth a b) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Acboth.$fShowAccumulateBoth2
                   (case x `cast` (Acboth.N:AccumulateBoth[0] <a>_N <b>_N) of wild {
                      Acboth.Success b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Acboth.$fShowAccumulateBoth4
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow
                                 Acboth.$fShowAccumulateBoth5
                                 b1
                                 Acboth.$fShowAccumulateBoth6))
                      Acboth.Failure b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Acboth.$fShowAccumulateBoth3
                              (GHC.Show.showsPrec
                                 @ b
                                 $dShow1
                                 Acboth.$fShowAccumulateBoth5
                                 b1
                                 Acboth.$fShowAccumulateBoth6)) })) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fShowAccumulateBoth_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [Acboth.AccumulateBoth a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (eta :: [Acboth.AccumulateBoth a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Acboth.AccumulateBoth a b)
                   (Acboth.$fShowAccumulateBoth_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Acboth.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $fShowAccumulateBoth_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int -> Acboth.AccumulateBoth a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Acboth.AccumulateBoth a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Acboth.$w$cshowsPrec @ a @ b w w1 ww1 w3 }) -}
599c874b4d7dd6ad26f2eb830885d4fc
  $fShowValidation ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Acboth.Validation a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Acboth.Validation a b)
                  (Acboth.$fShowValidation_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Acboth.$fShowValidation_$cshow @ a @ b $dShow $dShow1)
                  (Acboth.$fShowValidation_$cshowList @ a @ b $dShow $dShow1) -}
599c874b4d7dd6ad26f2eb830885d4fc
  $fShowValidation_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Acboth.Validation a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Acboth.Validation a b) ->
                 case x of wild {
                   Acboth.Success b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Acboth.$fShowAccumulateBoth4
                        (GHC.Show.showsPrec
                           @ a
                           $dShow1
                           Acboth.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Acboth.Failure b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Acboth.$fShowAccumulateBoth3
                        (GHC.Show.showsPrec
                           @ b
                           $dShow
                           Acboth.$fShowAccumulateBoth5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
599c874b4d7dd6ad26f2eb830885d4fc
  $fShowValidation_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Acboth.Validation a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Acboth.Validation a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Acboth.Validation a b)
                   (Acboth.$fShowValidation_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Acboth.$fShowAccumulateBoth1)
                   eta
                   eta1) -}
599c874b4d7dd6ad26f2eb830885d4fc
  $fShowValidation_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Acboth.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Acboth.Validation a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Acboth.$w$cshowsPrec1 @ a @ b w w1 ww1 w3 }) -}
4e3f9dafb6148716ddc433713d1d86ab
  $tc'AccumulateBoth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2573892939465920579##
                   17286804083459063249##
                   Acboth.$trModule
                   Acboth.$tc'AccumulateBoth1) -}
a15f92d6b462c7f9683ea6c2418f601c
  $tc'AccumulateBoth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AccumulateBoth"#) -}
cc0cbd292f0396c1c4edb45aef87d50f
  $tc'Failure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3962250210865444835##
                   12844346961962706235##
                   Acboth.$trModule
                   Acboth.$tc'Failure1) -}
524d7d28f9814390d9d5e9187b1d3f7b
  $tc'Failure1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Failure"#) -}
f0ea4b14e9ed49a211625e0d23c3707b
  $tc'Success :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14588608143799274394##
                   12199006776733062403##
                   Acboth.$trModule
                   Acboth.$tc'Success1) -}
0bbb4a14def3783d14044c3cfd19d660
  $tc'Success1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Success"#) -}
ad2699563621cf64404a61db1447cba0
  $tcAccumulateBoth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2879981027306844951##
                   137656461456099210##
                   Acboth.$trModule
                   Acboth.$tcAccumulateBoth1) -}
522745d89cad473f82fd497ffc61c447
  $tcAccumulateBoth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AccumulateBoth"#) -}
53766e1c88293bc33b26ff2fe10795fc
  $tcValidation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9647851119067117735##
                   9736166158326227267##
                   Acboth.$trModule
                   Acboth.$tcValidation1) -}
d474f03104cb4b855c2a14fa652f1d63
  $tcValidation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Validation"#) -}
f8a7a51e958ade2fc1578a7bb49702c7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Acboth.$trModule2
                   Acboth.$trModule1) -}
3139bf99c231febd43e34e0875aca3af
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Acboth"#) -}
786eb727d0b4dfb14f9204618eb10f19
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB"#) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $w$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Acboth.AccumulateBoth a b
    -> [Acboth.AccumulateBoth a b] -> Acboth.AccumulateBoth a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (ww :: Acboth.AccumulateBoth a b)
                   (ww1 :: [Acboth.AccumulateBoth a b]) ->
                 letrec {
                   go :: Acboth.AccumulateBoth a b
                         -> [Acboth.AccumulateBoth a b] -> Acboth.AccumulateBoth a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: Acboth.AccumulateBoth a b)
                       (ds1 :: [Acboth.AccumulateBoth a b]) ->
                     case ds1 of wild1 {
                       [] -> b1
                       : c cs
                       -> Acboth.$fSemigroupAccumulateBoth_$c<>
                            @ a
                            @ b
                            w
                            w1
                            b1
                            (go c cs) }
                 } in
                 go ww ww1) -}
1eaf621636ad8ce7d6f4bfce8e68c770
  $w$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int# -> Acboth.AccumulateBoth a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Acboth.AccumulateBoth a b) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Acboth.$w$cshowsPrec1
                       @ a
                       @ b
                       w1
                       w
                       11#
                       w2 `cast` (Acboth.N:AccumulateBoth[0] <a>_N <b>_N)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Acboth.$fShowAccumulateBoth2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Acboth.$fShowAccumulateBoth2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
599c874b4d7dd6ad26f2eb830885d4fc
  $w$cshowsPrec1 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> Acboth.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Acboth.Validation a b) ->
                 case w2 of wild {
                   Acboth.Success b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w1 Acboth.$fShowAccumulateBoth5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Acboth.$fShowAccumulateBoth4 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Acboth.$fShowAccumulateBoth4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Acboth.Failure b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w Acboth.$fShowAccumulateBoth5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Acboth.$fShowAccumulateBoth3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Acboth.$fShowAccumulateBoth3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
4d84db7b348065eaf288485cd3cd6722
  type AcbothAssoc =
    Acboth.AccumulateBoth GHC.Base.String GHC.Types.Ordering
    -> Acboth.AccumulateBoth GHC.Base.String GHC.Types.Ordering
    -> Acboth.AccumulateBoth GHC.Base.String GHC.Types.Ordering
    -> GHC.Types.Bool
1eaf621636ad8ce7d6f4bfce8e68c770
  newtype AccumulateBoth a b = AccumulateBoth (Acboth.Validation a b)
599c874b4d7dd6ad26f2eb830885d4fc
  data Validation a b = Success a | Failure b
6884f5891eed73cfbee9ddb37b4aa9de
  semigroupAcbothAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Acboth.AccumulateBoth]
  = Acboth.$fArbitraryAccumulateBoth
instance [safe] GHC.Classes.Eq [Acboth.AccumulateBoth]
  = Acboth.$fEqAccumulateBoth
instance [safe] GHC.Classes.Eq [Acboth.Validation]
  = Acboth.$fEqValidation
instance [safe] Data.Semigroup.Semigroup [Acboth.AccumulateBoth]
  = Acboth.$fSemigroupAccumulateBoth
instance [safe] GHC.Show.Show [Acboth.AccumulateBoth]
  = Acboth.$fShowAccumulateBoth
instance [safe] GHC.Show.Show [Acboth.Validation]
  = Acboth.$fShowValidation
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

