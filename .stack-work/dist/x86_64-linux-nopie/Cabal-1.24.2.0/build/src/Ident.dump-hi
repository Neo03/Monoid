
==================== FINAL INTERFACE ====================
2017-10-13 09:10:14.940736296 UTC

interface Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB:Ident 8002
  interface hash: c5bd895eb403f326ac4d364f25b3aded
  ABI hash: 74612c31b1389f90937ee59d83faa3a1
  export-list hash: 8631a2a33cf4d68919a5f9c192bd0151
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ident.semigroupIdentAssoc
  Ident.Identity{Ident.Identity}
  Ident.IdentityAssoc
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 0e953baf64c505f1557b2f8788d63173
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
23749762467855c2fc837d0405306a04
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Ident.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Ident.Identity a)
                  (Ident.$fArbitraryIdentity_$carbitrary @ a $dArbitrary)
                  (Ident.$fArbitraryIdentity_$cshrink @ a $dArbitrary) -}
f1f3d4976028a4eb3b356895375b20fc
  $fArbitraryIdentity1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                   (case eta
                           `cast`
                         (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww1
                           ww2
                           ww3
                           ww4 of ww7 { (#,#) ww8 ww9 ->
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } })
                   eta1) -}
23749762467855c2fc837d0405306a04
  $fArbitraryIdentity_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (Ident.Identity a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Ident.$fArbitraryIdentity1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Ident.N:Identity[0] <a>_R))) -}
23749762467855c2fc837d0405306a04
  $fArbitraryIdentity_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Ident.Identity a -> [Ident.Identity a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: Ident.Identity a) ->
                 GHC.Types.[] @ (Ident.Identity a)) -}
23749762467855c2fc837d0405306a04
  $fEqIdentity ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Ident.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (Ident.Identity a)
                  (Ident.$fEqIdentity_$c== @ a $dEq)
                  (Ident.$fEqIdentity_$c/= @ a $dEq) -}
23749762467855c2fc837d0405306a04
  $fEqIdentity_$c/= ::
    GHC.Classes.Eq a =>
    Ident.Identity a -> Ident.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(A,U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes./=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Ident.N:Identity[0] <a>_R)
                 ->_R Sym (Ident.N:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
23749762467855c2fc837d0405306a04
  $fEqIdentity_$c== ::
    GHC.Classes.Eq a =>
    Ident.Identity a -> Ident.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),U(U,A)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.==
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Ident.N:Identity[0] <a>_R)
                 ->_R Sym (Ident.N:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
23749762467855c2fc837d0405306a04
  $fSemigroupIdentity ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (Ident.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dSemigroup :: Data.Semigroup.Semigroup a).
                  @ (Ident.Identity a)
                  (Ident.$fSemigroupIdentity_$c<> @ a $dSemigroup)
                  (Ident.$fSemigroupIdentity_$csconcat @ a $dSemigroup)
                  (Ident.$fSemigroupIdentity_$cstimes @ a $dSemigroup) -}
23749762467855c2fc837d0405306a04
  $fSemigroupIdentity1 ::
    Data.Semigroup.Semigroup a =>
    Ident.Identity a -> Ident.Identity a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dSemigroup :: Data.Semigroup.Semigroup a)
                   (ds :: Ident.Identity a)
                   (ds1 :: Ident.Identity a) ->
                 Data.Semigroup.<>
                   @ a
                   $dSemigroup
                   ds `cast` (Ident.N:Identity[0] <a>_R)
                   ds1 `cast` (Ident.N:Identity[0] <a>_R)) -}
23749762467855c2fc837d0405306a04
  $fSemigroupIdentity_$c<> ::
    Data.Semigroup.Semigroup a =>
    Ident.Identity a -> Ident.Identity a -> Ident.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Ident.$fSemigroupIdentity1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Semigroup.Semigroup a>_R
                 ->_R <Ident.Identity a>_R
                 ->_R <Ident.Identity a>_R
                 ->_R Sym (Ident.N:Identity[0] <a>_R)) -}
23749762467855c2fc837d0405306a04
  $fSemigroupIdentity_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (Ident.Identity a) -> Ident.Identity a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.List.NonEmpty.NonEmpty (Ident.Identity a)) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Ident.$w$csconcat @ a w ww1 ww2 }) -}
23749762467855c2fc837d0405306a04
  $fSemigroupIdentity_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b.
    GHC.Real.Integral b =>
    b -> Ident.Identity a -> Ident.Identity a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U> -}
23749762467855c2fc837d0405306a04
  $fShowIdentity ::
    GHC.Show.Show a => GHC.Show.Show (Ident.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Ident.Identity a)
                  (Ident.$fShowIdentity_$cshowsPrec @ a $dShow)
                  (Ident.$fShowIdentity_$cshow @ a $dShow)
                  (Ident.$fShowIdentity_$cshowList @ a $dShow) -}
d96e2b2c74281fa559c03fdba0abe288
  $fShowIdentity1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
7e93532860ea396355786be424a1b00b
  $fShowIdentity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Identity "#) -}
901e296feeb99542227b5beb0d26e4a0
  $fShowIdentity3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
23749762467855c2fc837d0405306a04
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => Ident.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Ident.Identity a) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Ident.$fShowIdentity2)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow
                      Ident.$fShowIdentity3
                      x `cast` (Ident.N:Identity[0] <a>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
23749762467855c2fc837d0405306a04
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a => [Ident.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Ident.Identity a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Ident.Identity a)
                   (Ident.$fShowIdentity_$cshowsPrec @ a $dShow Ident.$fShowIdentity1)
                   eta
                   eta1) -}
23749762467855c2fc837d0405306a04
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Ident.Identity a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Ident.Identity a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Ident.$w$cshowsPrec @ a w ww1 w2 }) -}
5a90aea5d6edb2294ba996ecc1e08ece
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   717655471767837033##
                   4961872366612162612##
                   Ident.$trModule
                   Ident.$tc'Identity1) -}
5edf29d3bf288ea5f022def84892a8fd
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
fb8357fab341782a30fe87df7ef06aa4
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12619637641768922703##
                   10556849816401834912##
                   Ident.$trModule
                   Ident.$tcIdentity1) -}
db24f9878589d541f935af55af4e8741
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Identity"#) -}
30ceca520c01e1e9a917c08d3b74a3af
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Ident.$trModule2 Ident.$trModule1) -}
dfae0237527b426e74fa9fe288244745
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ident"#) -}
e4d48366b49a3f2b5880f59baf761867
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB"#) -}
23749762467855c2fc837d0405306a04
  $w$csconcat ::
    Data.Semigroup.Semigroup a =>
    Ident.Identity a -> [Ident.Identity a] -> Ident.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Semigroup.Semigroup a)
                   (ww :: Ident.Identity a)
                   (ww1 :: [Ident.Identity a]) ->
                 letrec {
                   go :: Ident.Identity a -> [Ident.Identity a] -> Ident.Identity a
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b :: Ident.Identity a) (ds1 :: [Ident.Identity a]) ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> (Data.Semigroup.<>
                             @ a
                             w
                             b `cast` (Ident.N:Identity[0] <a>_R)
                             (go c cs) `cast` (Ident.N:Identity[0] <a>_R))
                            `cast`
                          (Sym (Ident.N:Identity[0] <a>_R)) }
                 } in
                 go ww ww1) -}
23749762467855c2fc837d0405306a04
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Ident.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Ident.Identity a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Ident.$fShowIdentity3
                       w1 `cast` (Ident.N:Identity[0] <a>_R)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Ident.$fShowIdentity2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Ident.$fShowIdentity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
23749762467855c2fc837d0405306a04
  newtype Identity a = Identity a
bf1b4ffb676cc3a940fb2c58114722ec
  type IdentityAssoc =
    Ident.Identity GHC.Base.String
    -> Ident.Identity GHC.Base.String
    -> Ident.Identity GHC.Base.String
    -> GHC.Types.Bool
c01f8bd9b004f1d90389852db581b7bb
  semigroupIdentAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Ident.Identity]
  = Ident.$fArbitraryIdentity
instance [safe] GHC.Classes.Eq [Ident.Identity]
  = Ident.$fEqIdentity
instance [safe] Data.Semigroup.Semigroup [Ident.Identity]
  = Ident.$fSemigroupIdentity
instance [safe] GHC.Show.Show [Ident.Identity]
  = Ident.$fShowIdentity
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

