
==================== FINAL INTERFACE ====================
2017-10-13 09:10:16.689892539 UTC

interface Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB:Accum 8002
  interface hash: e6daf1c6d6e75433e9dc2f9c48d88032
  ABI hash: fdb346c2dd0134900ea1746fc920f2a1
  export-list hash: 7ab6e3730b2054fe8393f80a8b804697
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Accum.semigroupAccumAssoc
  Accum.AccumAssoc
  Accum.AccumulateRight{Accum.AccumulateRight}
  Accum.Validation{Accum.Failure Accum.Success}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 0e953baf64c505f1557b2f8788d63173
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Gen f58893849fb1d103be122a409ecfc455
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
6cf647718436c0da99f8ed0ca5641d73
  $fArbitraryAccumulateRight ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Accum.AccumulateRight a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Accum.AccumulateRight a b)
                  (Accum.$fArbitraryAccumulateRight_$carbitrary
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1)
                  (Accum.$fArbitraryAccumulateRight_$cshrink
                     @ a
                     @ b
                     $dArbitrary
                     $dArbitrary1) -}
6cf647718436c0da99f8ed0ca5641d73
  $fArbitraryAccumulateRight1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Accum.AccumulateRight a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 (Test.QuickCheck.Gen.elements
                    @ (Accum.AccumulateRight a b)
                    (GHC.Types.:
                       @ (Accum.AccumulateRight a b)
                       (Accum.Failure
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             (case ds1 of wild { (,) r1 r2 -> r1 })
                             eta1))
                         `cast`
                       (Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N)
                       (GHC.Types.:
                          @ (Accum.AccumulateRight a b)
                          (Accum.Success
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                (case ds2 of wild { (,) r1 r2 -> r1 })
                                eta1))
                            `cast`
                          (Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N)
                          (GHC.Types.[] @ (Accum.AccumulateRight a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Accum.AccumulateRight a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
6cf647718436c0da99f8ed0ca5641d73
  $fArbitraryAccumulateRight_$carbitrary ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Accum.AccumulateRight a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Accum.$fArbitraryAccumulateRight1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Accum.AccumulateRight a b>_R)) -}
6cf647718436c0da99f8ed0ca5641d73
  $fArbitraryAccumulateRight_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Accum.AccumulateRight a b -> [Accum.AccumulateRight a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Accum.AccumulateRight a b) ->
                 GHC.Types.[] @ (Accum.AccumulateRight a b)) -}
6cf647718436c0da99f8ed0ca5641d73
  $fEqAccumulateRight ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (Accum.AccumulateRight a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq a)
                      ($dEq1 :: GHC.Classes.Eq b).
                  @ (Accum.AccumulateRight a b)
                  (Accum.$fEqAccumulateRight_$c== @ a @ b $dEq $dEq1)
                  (Accum.$fEqAccumulateRight_$c/= @ a @ b $dEq $dEq1) -}
7e1e3b1320628acb734258b49959850b
  $fEqAccumulateRight1 ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Accum.Validation a b -> Accum.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (eta :: Accum.Validation a b)
                   (eta1 :: Accum.Validation a b) ->
                 Accum.$fEqAccumulateRight_$c/=1 @ a @ b $dEq1 $dEq eta eta1) -}
f34ab343583d3903f9f901e38143b2db
  $fEqAccumulateRight2 ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Accum.Validation a b -> Accum.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (eta :: Accum.Validation a b)
                   (eta1 :: Accum.Validation a b) ->
                 Accum.$fEqAccumulateRight_$c==1 @ a @ b $dEq1 $dEq eta eta1) -}
6cf647718436c0da99f8ed0ca5641d73
  $fEqAccumulateRight_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Accum.AccumulateRight a b
    -> Accum.AccumulateRight a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Accum.$fEqAccumulateRight1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
6f71e9de734b24697c4b397205d615f4
  $fEqAccumulateRight_$c/=1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Accum.Validation a b -> Accum.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: Accum.Validation a b)
                   (b1 :: Accum.Validation a b) ->
                 case a1 of wild {
                   Accum.Failure a2
                   -> case b1 of wild1 {
                        Accum.Failure b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Accum.Success ipv -> GHC.Types.True }
                   Accum.Success a2
                   -> case b1 of wild1 {
                        Accum.Failure ipv -> GHC.Types.True
                        Accum.Success b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
6cf647718436c0da99f8ed0ca5641d73
  $fEqAccumulateRight_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Accum.AccumulateRight a b
    -> Accum.AccumulateRight a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Accum.$fEqAccumulateRight2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Classes.Eq b>_R
                 ->_R Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N
                 ->_R <GHC.Types.Bool>_R) -}
6f71e9de734b24697c4b397205d615f4
  $fEqAccumulateRight_$c==1 ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Accum.Validation a b -> Accum.Validation a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: Accum.Validation a b)
                   (ds1 :: Accum.Validation a b) ->
                 case ds of wild {
                   Accum.Failure a1
                   -> case ds1 of wild1 {
                        Accum.Failure b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        Accum.Success ipv -> GHC.Types.False }
                   Accum.Success a1
                   -> case ds1 of wild1 {
                        Accum.Failure ipv -> GHC.Types.False
                        Accum.Success b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
6f71e9de734b24697c4b397205d615f4
  $fEqValidation ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Accum.Validation a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Accum.Validation a b)
                  (Accum.$fEqAccumulateRight_$c==1 @ a @ b $dEq $dEq1)
                  (Accum.$fEqAccumulateRight_$c/=1 @ a @ b $dEq $dEq1) -}
6cf647718436c0da99f8ed0ca5641d73
  $fSemigroupAccumulateRight ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.Semigroup.Semigroup (Accum.AccumulateRight a b)
  DFunId
  {- Arity: 2, Strictness: <L,A><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dSemigroup :: Data.Semigroup.Semigroup a)
                      ($dSemigroup1 :: Data.Semigroup.Semigroup b).
                  @ (Accum.AccumulateRight a b)
                  (Accum.$fSemigroupAccumulateRight_$c<>
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (Accum.$fSemigroupAccumulateRight_$csconcat
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1)
                  (Accum.$fSemigroupAccumulateRight_$cstimes
                     @ a
                     @ b
                     $dSemigroup
                     $dSemigroup1) -}
6cf647718436c0da99f8ed0ca5641d73
  $fSemigroupAccumulateRight_$c<> ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Accum.AccumulateRight a b
    -> Accum.AccumulateRight a b -> Accum.AccumulateRight a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Accum.AccumulateRight a b)
                   (w3 :: Accum.AccumulateRight a b) ->
                 Accum.$w$c<> @ a @ b w1 w2 w3) -}
6cf647718436c0da99f8ed0ca5641d73
  $fSemigroupAccumulateRight_$csconcat ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    Data.List.NonEmpty.NonEmpty (Accum.AccumulateRight a b)
    -> Accum.AccumulateRight a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   (w2 :: Data.List.NonEmpty.NonEmpty (Accum.AccumulateRight a b)) ->
                 case w2 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Accum.$w$csconcat @ a @ b w1 ww1 ww2 }) -}
6cf647718436c0da99f8ed0ca5641d73
  $fSemigroupAccumulateRight_$cstimes ::
    (Data.Semigroup.Semigroup a, Data.Semigroup.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Accum.AccumulateRight a b -> Accum.AccumulateRight a b
  {- Arity: 5,
     Strictness: <L,A><L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup a)
                   (w1 :: Data.Semigroup.Semigroup b)
                   @ b1
                   (w2 :: GHC.Real.Integral b1)
                   (w3 :: b1)
                   (w4 :: Accum.AccumulateRight a b) ->
                 Accum.$w$cstimes @ a @ b w1 @ b1 w2 w3 w4) -}
6cf647718436c0da99f8ed0ca5641d73
  $fShowAccumulateRight ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Show.Show (Accum.AccumulateRight a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show a)
                      ($dShow1 :: GHC.Show.Show b).
                  @ (Accum.AccumulateRight a b)
                  (Accum.$fShowAccumulateRight_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Accum.$fShowAccumulateRight_$cshow @ a @ b $dShow $dShow1)
                  (Accum.$fShowAccumulateRight_$cshowList @ a @ b $dShow $dShow1) -}
05359fd9e18ad9a5b1e2dd375603604e
  $fShowAccumulateRight1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8b032c4f43a8c26265798e221a3a3f21
  $fShowAccumulateRight2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccumulateRight "#) -}
1370c088fc387cafef567326eb18fbfc
  $fShowAccumulateRight3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Success "#) -}
d8dcc290c73ec78f5dcd5bd13cded6c3
  $fShowAccumulateRight4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Failure "#) -}
af09f5348862f289ae8d0242bbb941b0
  $fShowAccumulateRight5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
290db238a9a71b8c381cd9cb38afb213
  $fShowAccumulateRight6 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6cf647718436c0da99f8ed0ca5641d73
  $fShowAccumulateRight_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    Accum.AccumulateRight a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (x :: Accum.AccumulateRight a b) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Accum.$fShowAccumulateRight2
                   (case x `cast` (Accum.N:AccumulateRight[0] <a>_N <b>_N) of wild {
                      Accum.Failure b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Accum.$fShowAccumulateRight4
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow
                                 Accum.$fShowAccumulateRight5
                                 b1
                                 Accum.$fShowAccumulateRight6))
                      Accum.Success b1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Accum.$fShowAccumulateRight3
                              (GHC.Show.showsPrec
                                 @ b
                                 $dShow1
                                 Accum.$fShowAccumulateRight5
                                 b1
                                 Accum.$fShowAccumulateRight6)) })) -}
6cf647718436c0da99f8ed0ca5641d73
  $fShowAccumulateRight_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [Accum.AccumulateRight a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (eta :: [Accum.AccumulateRight a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Accum.AccumulateRight a b)
                   (Accum.$fShowAccumulateRight_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Accum.$fShowAccumulateRight1)
                   eta
                   eta1) -}
6cf647718436c0da99f8ed0ca5641d73
  $fShowAccumulateRight_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int -> Accum.AccumulateRight a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Accum.AccumulateRight a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Accum.$w$cshowsPrec @ a @ b w w1 ww1 w3 }) -}
6f71e9de734b24697c4b397205d615f4
  $fShowValidation ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Accum.Validation a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Accum.Validation a b)
                  (Accum.$fShowValidation_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Accum.$fShowValidation_$cshow @ a @ b $dShow $dShow1)
                  (Accum.$fShowValidation_$cshowList @ a @ b $dShow $dShow1) -}
6f71e9de734b24697c4b397205d615f4
  $fShowValidation_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Accum.Validation a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Accum.Validation a b) ->
                 case x of wild {
                   Accum.Failure b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Accum.$fShowAccumulateRight4
                        (GHC.Show.showsPrec
                           @ a
                           $dShow1
                           Accum.$fShowAccumulateRight5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Accum.Success b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Accum.$fShowAccumulateRight3
                        (GHC.Show.showsPrec
                           @ b
                           $dShow
                           Accum.$fShowAccumulateRight5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
6f71e9de734b24697c4b397205d615f4
  $fShowValidation_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Accum.Validation a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Accum.Validation a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Accum.Validation a b)
                   (Accum.$fShowValidation_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Accum.$fShowAccumulateRight1)
                   eta
                   eta1) -}
6f71e9de734b24697c4b397205d615f4
  $fShowValidation_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Accum.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Accum.Validation a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Accum.$w$cshowsPrec1 @ a @ b w w1 ww1 w3 }) -}
73299990361080f59f43f3a345f0f6a7
  $tc'AccumulateRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11570976216777422132##
                   12795903552173716172##
                   Accum.$trModule
                   Accum.$tc'AccumulateRight1) -}
9733593df012ae5bf11bec138afca250
  $tc'AccumulateRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AccumulateRight"#) -}
5518c05bda478b2cd2f49d4dabc76723
  $tc'Failure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17603420113943642404##
                   16038486839789613740##
                   Accum.$trModule
                   Accum.$tc'Failure1) -}
084079a9c3b6f9a4e8dca3d387d169d3
  $tc'Failure1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Failure"#) -}
0adbe7770619500a806071fc0e432a7f
  $tc'Success :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14161484637647904742##
                   17073551331112900088##
                   Accum.$trModule
                   Accum.$tc'Success1) -}
5a87ebc97b33341c864786af1bafe7be
  $tc'Success1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Success"#) -}
8ccf932576f68c681eb5c2a0953122a7
  $tcAccumulateRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2450258985210237223##
                   8377814006198170407##
                   Accum.$trModule
                   Accum.$tcAccumulateRight1) -}
e6eb1b99a547abb7d2c864a11e8702c2
  $tcAccumulateRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AccumulateRight"#) -}
52ea0c3f46371ba6de4675c6ff0bdfda
  $tcValidation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8210680868655342332##
                   8066589551434174713##
                   Accum.$trModule
                   Accum.$tcValidation1) -}
25a4b6202ae1544a4345f250f4b61eb3
  $tcValidation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Validation"#) -}
c34df8ff81049b7085baca658d777998
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Accum.$trModule2 Accum.$trModule1) -}
8e398b478ea72ea77bcf83d01b4b3398
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Accum"#) -}
a396ac3745e068cbaa780e54db0af4f5
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB"#) -}
6cf647718436c0da99f8ed0ca5641d73
  $w$c<> ::
    Data.Semigroup.Semigroup b =>
    Accum.AccumulateRight a b
    -> Accum.AccumulateRight a b -> Accum.AccumulateRight a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup b)
                   (w1 :: Accum.AccumulateRight a b)
                   (w2 :: Accum.AccumulateRight a b) ->
                 case w1 `cast` (Accum.N:AccumulateRight[0] <a>_N <b>_N) of wild {
                   Accum.Failure ipv
                   -> case w2
                             `cast`
                           (Accum.N:AccumulateRight[0] <a>_N <b>_N) of wild1 {
                        Accum.Failure a1
                        -> (Accum.Failure @ a @ b a1)
                             `cast`
                           (Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N)
                        Accum.Success ipv1
                        -> (Accum.Failure @ a @ b ipv)
                             `cast`
                           (Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N) }
                   Accum.Success a1
                   -> case w2
                             `cast`
                           (Accum.N:AccumulateRight[0] <a>_N <b>_N) of wild1 {
                        Accum.Failure ipv
                        -> (Accum.Failure @ a @ b ipv)
                             `cast`
                           (Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N)
                        Accum.Success b1
                        -> (Accum.Success @ a @ b (Data.Semigroup.<> @ b w a1 b1))
                             `cast`
                           (Sym (Accum.N:AccumulateRight[0]) <a>_N <b>_N) } }) -}
6cf647718436c0da99f8ed0ca5641d73
  $w$csconcat ::
    Data.Semigroup.Semigroup b =>
    Accum.AccumulateRight a b
    -> [Accum.AccumulateRight a b] -> Accum.AccumulateRight a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Semigroup.Semigroup b)
                   (ww :: Accum.AccumulateRight a b)
                   (ww1 :: [Accum.AccumulateRight a b]) ->
                 letrec {
                   go :: Accum.AccumulateRight a b
                         -> [Accum.AccumulateRight a b] -> Accum.AccumulateRight a b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b1 :: Accum.AccumulateRight a b)
                       (ds1 :: [Accum.AccumulateRight a b]) ->
                     case ds1 of wild1 {
                       [] -> b1 : c cs -> Accum.$w$c<> @ a @ b w b1 (go c cs) }
                 } in
                 go ww ww1) -}
6cf647718436c0da99f8ed0ca5641d73
  $w$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int# -> Accum.AccumulateRight a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Accum.AccumulateRight a b) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Accum.$w$cshowsPrec1
                       @ a
                       @ b
                       w1
                       w
                       11#
                       w2 `cast` (Accum.N:AccumulateRight[0] <a>_N <b>_N)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Accum.$fShowAccumulateRight2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Accum.$fShowAccumulateRight2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
6f71e9de734b24697c4b397205d615f4
  $w$cshowsPrec1 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> Accum.Validation a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Accum.Validation a b) ->
                 case w2 of wild {
                   Accum.Failure b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w1 Accum.$fShowAccumulateRight5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Accum.$fShowAccumulateRight4 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Accum.$fShowAccumulateRight4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Accum.Success b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w Accum.$fShowAccumulateRight5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Accum.$fShowAccumulateRight3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Accum.$fShowAccumulateRight3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
6cf647718436c0da99f8ed0ca5641d73
  $w$cstimes ::
    Data.Semigroup.Semigroup b =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Accum.AccumulateRight a b -> Accum.AccumulateRight a b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><S,U>,
     Inline: [0] -}
4aaf9f3463754aadfd56a7abac704f6b
  type AccumAssoc =
    Accum.AccumulateRight GHC.Base.String GHC.Types.Ordering
    -> Accum.AccumulateRight GHC.Base.String GHC.Types.Ordering
    -> Accum.AccumulateRight GHC.Base.String GHC.Types.Ordering
    -> GHC.Types.Bool
6cf647718436c0da99f8ed0ca5641d73
  newtype AccumulateRight a b
    = AccumulateRight (Accum.Validation a b)
6f71e9de734b24697c4b397205d615f4
  data Validation a b = Failure a | Success b
5c99db122fa4bbc40d494e697adbb2c8
  semigroupAccumAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Accum.AccumulateRight]
  = Accum.$fArbitraryAccumulateRight
instance [safe] GHC.Classes.Eq [Accum.AccumulateRight]
  = Accum.$fEqAccumulateRight
instance [safe] GHC.Classes.Eq [Accum.Validation]
  = Accum.$fEqValidation
instance [safe] Data.Semigroup.Semigroup [Accum.AccumulateRight]
  = Accum.$fSemigroupAccumulateRight
instance [safe] GHC.Show.Show [Accum.AccumulateRight]
  = Accum.$fShowAccumulateRight
instance [safe] GHC.Show.Show [Accum.Validation]
  = Accum.$fShowValidation
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

