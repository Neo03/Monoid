
==================== FINAL INTERFACE ====================
2017-10-13 09:10:13.935765918 UTC

interface Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB:Trivial 8002
  interface hash: 3d752ebc41605c1b9e88731944867c52
  ABI hash: 0f8b80f43a907fba715f6db7027c0d25
  export-list hash: a515739ca0c372954412490d18fb5878
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Trivial.semigroupAssoc
  Trivial.Trivial{Trivial.Trivial}
  Trivial.TrivialAssoc
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 0e953baf64c505f1557b2f8788d63173
import  -/  base-4.9.1.0:Data.Semigroup fc55c71ff629dcbd821309c310055959
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
8dec69c6e1dd356639ba5137d127dd54
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Trivial.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trivial.Trivial
                  Trivial.$fArbitraryTrivial_$carbitrary
                  Trivial.$fArbitraryTrivial_$s$dmshrink -}
8dec69c6e1dd356639ba5137d127dd54
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Trivial.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Trivial.Trivial) -}
8dec69c6e1dd356639ba5137d127dd54
  $fArbitraryTrivial_$carbitrary ::
    Test.QuickCheck.Gen.Gen Trivial.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Trivial.$fArbitraryTrivial1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <Trivial.Trivial>_R)) -}
8dec69c6e1dd356639ba5137d127dd54
  $fArbitraryTrivial_$s$dmshrink ::
    Trivial.Trivial -> [Trivial.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ (ds1 :: Trivial.Trivial) -> GHC.Types.[] @ Trivial.Trivial) -}
8dec69c6e1dd356639ba5137d127dd54
  $fEqTrivial :: GHC.Classes.Eq Trivial.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trivial.Trivial
                  Trivial.$fEqTrivial_$c==
                  Trivial.$fEqTrivial_$c/= -}
8dec69c6e1dd356639ba5137d127dd54
  $fEqTrivial_$c/= ::
    Trivial.Trivial -> Trivial.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Trivial.Trivial) (b :: Trivial.Trivial) ->
                 case a of wild { Trivial.Trivial ->
                 case b of wild1 { Trivial.Trivial -> GHC.Types.False } }) -}
8dec69c6e1dd356639ba5137d127dd54
  $fEqTrivial_$c== ::
    Trivial.Trivial -> Trivial.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Trivial.Trivial) (ds1 :: Trivial.Trivial) ->
                 case ds of wild { Trivial.Trivial ->
                 case ds1 of wild1 { Trivial.Trivial -> GHC.Types.True } }) -}
8dec69c6e1dd356639ba5137d127dd54
  $fSemigroupTrivial :: Data.Semigroup.Semigroup Trivial.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trivial.Trivial
                  Trivial.$fSemigroupTrivial_$c<>
                  Trivial.$fSemigroupTrivial_$csconcat
                  Trivial.$fSemigroupTrivial_$cstimes -}
8dec69c6e1dd356639ba5137d127dd54
  $fSemigroupTrivial_$c<> ::
    Trivial.Trivial -> Trivial.Trivial -> Trivial.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Trivial.Trivial) (ds1 :: Trivial.Trivial) ->
                 Trivial.Trivial) -}
8dec69c6e1dd356639ba5137d127dd54
  $fSemigroupTrivial_$csconcat ::
    Data.List.NonEmpty.NonEmpty Trivial.Trivial -> Trivial.Trivial
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U(),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.List.NonEmpty.NonEmpty Trivial.Trivial) ->
                 case ds of wild { Data.List.NonEmpty.:| a1 as ->
                 case as of wild1 { [] -> a1 : c cs -> Trivial.Trivial } }) -}
8dec69c6e1dd356639ba5137d127dd54
  $fSemigroupTrivial_$cstimes ::
    GHC.Real.Integral b => b -> Trivial.Trivial -> Trivial.Trivial
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,1*U()> -}
8dec69c6e1dd356639ba5137d127dd54
  $fShowTrivial :: GHC.Show.Show Trivial.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trivial.Trivial
                  Trivial.$fShowTrivial_$cshowsPrec
                  Trivial.$fShowTrivial_$cshow
                  Trivial.$fShowTrivial_$cshowList -}
8dec69c6e1dd356639ba5137d127dd54
  $fShowTrivial1 :: Trivial.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Trivial.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { Trivial.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Trivial.$fShowTrivial2)
                   eta }) -}
aaf9ea20c1ad792b6143e2aca281ee0d
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Trivial"#) -}
8dec69c6e1dd356639ba5137d127dd54
  $fShowTrivial_$cshow :: Trivial.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Trivial.Trivial) ->
                 case x of wild { Trivial.Trivial -> Trivial.$fShowTrivial2 }) -}
8dec69c6e1dd356639ba5137d127dd54
  $fShowTrivial_$cshowList :: [Trivial.Trivial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Trivial.Trivial
                   Trivial.$fShowTrivial1) -}
8dec69c6e1dd356639ba5137d127dd54
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Trivial.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Trivial.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { Trivial.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Trivial.$fShowTrivial2)
                   eta }) -}
8bac22a600b5b792b09297ff19ca262d
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7708689575879930297##
                   13093522139805112257##
                   Trivial.$trModule
                   Trivial.$tc'Trivial1) -}
fb9fb9322c61021bb3f4d3e3bd627e22
  $tc'Trivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Trivial"#) -}
079c34ae9904237c02612ca9e571fbb8
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5624964233740192240##
                   6676650329288658912##
                   Trivial.$trModule
                   Trivial.$trModule1) -}
3aa7b91158f96d6adea0e822e4de5288
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Trivial.$trModule2
                   Trivial.$trModule1) -}
329515e3a01ed452e2f09c40a34b06ff
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Trivial"#) -}
5a7e5a117db9d5c0f850b24a3854b601
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Monoid-0.1.0.0-8OQYrO08pKgJ5cyLnRejZB"#) -}
8dec69c6e1dd356639ba5137d127dd54
  data Trivial = Trivial
9099c3217e2c1fc208e27ce1665d982f
  type TrivialAssoc =
    Trivial.Trivial
    -> Trivial.Trivial -> Trivial.Trivial -> GHC.Types.Bool
e7e4fdc3cabc6fdf5a3019c51fe1b59f
  semigroupAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dSemigroup :: Data.Semigroup.Semigroup m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Trivial.Trivial]
  = Trivial.$fArbitraryTrivial
instance [safe] GHC.Classes.Eq [Trivial.Trivial]
  = Trivial.$fEqTrivial
instance [safe] Data.Semigroup.Semigroup [Trivial.Trivial]
  = Trivial.$fSemigroupTrivial
instance [safe] GHC.Show.Show [Trivial.Trivial]
  = Trivial.$fShowTrivial
"SPEC/Trivial $dmshrink @ Trivial" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                     Trivial.Trivial)
  Test.QuickCheck.Arbitrary.$dmshrink @ Trivial.Trivial $dArbitrary
  = Trivial.$fArbitraryTrivial_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

