
==================== FINAL INTERFACE ====================
2017-09-19 21:55:29.525783 UTC

interface main@main:FirstMappend 8002
  interface hash: 0340d3d803914ed47d6776234916c968
  ABI hash: 21d5a8f9a90ad37ce1e66cce55196c57
  export-list hash: 640a2176ddf94f54cb20109e20905d91
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 95f57cab331b2e772ce15b4b0b59d534
  sig of: Nothing
  used TH splices: False
  where
exports:
  FirstMappend.firstMappend
  FirstMappend.monoidAssoc
  FirstMappend.monoidLeftIdentity
  FirstMappend.monoidRightIdentity
  FirstMappend.First'{FirstMappend.First' getFirst'}
  FirstMappend.FirstMappend
  FirstMappend.Optional{FirstMappend.Nada FirstMappend.Only}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 3eced3806649dec5bc33bd64f5171465
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Gen a986eabe5e103a4dc2686a9ffb4cae41
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
db08250cb40be7c058c16ec1829970b3
  $fArbitraryFirst' ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (FirstMappend.First' a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fArbitraryFirst'_$carbitrary @ a $dArbitrary)
                  (FirstMappend.$fArbitraryFirst'_$cshrink @ a $dArbitrary) -}
db08250cb40be7c058c16ec1829970b3
  $fArbitraryFirst'1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FirstMappend.First' a
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   x :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (FirstMappend.First' a)
                    (GHC.Types.:
                       @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
                       (FirstMappend.$fArbitraryFirst'3 @ a)
                       (GHC.Types.:
                          @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
                          (FirstMappend.$fArbitraryFirst'2,
                           let {
                             x1 :: FirstMappend.Optional a = FirstMappend.Only @ a x
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds2 :: GHC.Types.Int) ->
                            x1)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     (FirstMappend.N:First'[0] <a>_N))))
                          (GHC.Types.[]
                             @ (GHC.Types.Int,
                                Test.QuickCheck.Gen.Gen (FirstMappend.First' a))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <FirstMappend.First' a>_R)
                   (case ds1 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
29cef4a43c752f8a2a858c4846479f70
  $fArbitraryFirst'2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
db08250cb40be7c058c16ec1829970b3
  $fArbitraryFirst'3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ a ->
                 (FirstMappend.$fArbitraryFirst'2,
                  (FirstMappend.$fArbitraryFirst'4 @ a)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            (FirstMappend.N:First'[0] <a>_N))))) -}
ec6b2431b91484965d3062aab84e5af3
  $fArbitraryFirst'4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FirstMappend.Optional a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 FirstMappend.Nada @ a) -}
db08250cb40be7c058c16ec1829970b3
  $fArbitraryFirst'_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (FirstMappend.First' a)
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fArbitraryFirst'1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <FirstMappend.First' a>_R)) -}
db08250cb40be7c058c16ec1829970b3
  $fArbitraryFirst'_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    FirstMappend.First' a -> [FirstMappend.First' a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: FirstMappend.First' a) ->
                 GHC.Types.[] @ (FirstMappend.First' a)) -}
db08250cb40be7c058c16ec1829970b3
  $fEqFirst' ::
    GHC.Classes.Eq a => GHC.Classes.Eq (FirstMappend.First' a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fEqFirst'_$c== @ a $dEq)
                  (FirstMappend.$fEqFirst'_$c/= @ a $dEq) -}
db08250cb40be7c058c16ec1829970b3
  $fEqFirst'_$c/= ::
    GHC.Classes.Eq a =>
    FirstMappend.First' a -> FirstMappend.First' a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fEqFirst'_$c/=1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (FirstMappend.N:First'[0]) <a>_N
                 ->_R Sym (FirstMappend.N:First'[0]) <a>_N
                 ->_R <GHC.Types.Bool>_R) -}
da4ecd2274ed6f68860e9933f0a9480a
  $fEqFirst'_$c/=1 ::
    GHC.Classes.Eq a =>
    FirstMappend.Optional a
    -> FirstMappend.Optional a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: FirstMappend.Optional a)
                   (b :: FirstMappend.Optional a) ->
                 case a1 of wild {
                   FirstMappend.Nada
                   -> case b of wild1 {
                        FirstMappend.Nada -> GHC.Types.False
                        FirstMappend.Only ipv -> GHC.Types.True }
                   FirstMappend.Only a2
                   -> case b of wild1 {
                        FirstMappend.Nada -> GHC.Types.True
                        FirstMappend.Only b1
                        -> case GHC.Classes.== @ a $dEq a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
db08250cb40be7c058c16ec1829970b3
  $fEqFirst'_$c== ::
    GHC.Classes.Eq a =>
    FirstMappend.First' a -> FirstMappend.First' a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fEqFirst'_$c==1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (FirstMappend.N:First'[0]) <a>_N
                 ->_R Sym (FirstMappend.N:First'[0]) <a>_N
                 ->_R <GHC.Types.Bool>_R) -}
da4ecd2274ed6f68860e9933f0a9480a
  $fEqFirst'_$c==1 ::
    GHC.Classes.Eq a =>
    FirstMappend.Optional a
    -> FirstMappend.Optional a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: FirstMappend.Optional a)
                   (ds1 :: FirstMappend.Optional a) ->
                 case ds of wild {
                   FirstMappend.Nada
                   -> case ds1 of wild1 {
                        FirstMappend.Nada -> GHC.Types.True
                        FirstMappend.Only ipv -> GHC.Types.False }
                   FirstMappend.Only a1
                   -> case ds1 of wild1 {
                        FirstMappend.Nada -> GHC.Types.False
                        FirstMappend.Only b1 -> GHC.Classes.== @ a $dEq a1 b1 } }) -}
da4ecd2274ed6f68860e9933f0a9480a
  $fEqOptional ::
    GHC.Classes.Eq a => GHC.Classes.Eq (FirstMappend.Optional a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (FirstMappend.Optional a)
                  (FirstMappend.$fEqFirst'_$c==1 @ a $dEq)
                  (FirstMappend.$fEqFirst'_$c/=1 @ a $dEq) -}
db08250cb40be7c058c16ec1829970b3
  $fMonoidFirst' :: GHC.Base.Monoid (FirstMappend.First' a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (FirstMappend.First' a)
                  (FirstMappend.Nada @ a)
                    `cast`
                  (Sym (FirstMappend.N:First'[0]) <a>_N)
                  (FirstMappend.$fMonoidFirst'_$cmappend @ a)
                  (FirstMappend.$fMonoidFirst'_$cmconcat @ a) -}
db08250cb40be7c058c16ec1829970b3
  $fMonoidFirst'1 :: [FirstMappend.First' a] -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
db08250cb40be7c058c16ec1829970b3
  $fMonoidFirst'_$cmappend ::
    FirstMappend.First' a
    -> FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True) FirstMappend.firstMappend -}
db08250cb40be7c058c16ec1829970b3
  $fMonoidFirst'_$cmconcat ::
    [FirstMappend.First' a] -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a (eta :: [FirstMappend.First' a]) ->
                 FirstMappend.$fMonoidFirst'1 @ a eta) -}
db08250cb40be7c058c16ec1829970b3
  $fShowFirst' ::
    GHC.Show.Show a => GHC.Show.Show (FirstMappend.First' a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fShowFirst'_$cshowsPrec @ a $dShow)
                  (FirstMappend.$fShowFirst'_$cshow @ a $dShow)
                  (FirstMappend.$fShowFirst'_$cshowList @ a $dShow) -}
45196f26415edd88f94cba4cb5269dc9
  $fShowFirst'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b0708dbd993d4fe30bb8c15f89512cc4
  $fShowFirst'10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'8
                   FirstMappend.$fShowFirst'9) -}
b7a2846f341fe5ee7e19cfc9cf3347ed
  $fShowFirst'2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
b3936d04a5c8a3ec2f3889f21d069e7f
  $fShowFirst'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getFirst' = "#) -}
a937509c0ae2543495215db664198218
  $fShowFirst'4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "First' {"#) -}
2934a65d5e5d7f8097fd1142b9db6417
  $fShowFirst'5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Only "#) -}
da17645a9186f9cb8c87d4f5aa3083b3
  $fShowFirst'6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
f767d7a0a717986b79c2e3ce0ec723de
  $fShowFirst'7 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'8) -}
2df2c5cee65304c66d87ab0fcd0e824c
  $fShowFirst'8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nada"#) -}
5c1052ba06f658fc2bd494a49a1ef048
  $fShowFirst'9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
db08250cb40be7c058c16ec1829970b3
  $fShowFirst'_$cshow ::
    GHC.Show.Show a => FirstMappend.First' a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: FirstMappend.First' a) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'4
                   (GHC.Base.++
                      @ GHC.Types.Char
                      FirstMappend.$fShowFirst'3
                      (case x `cast` (FirstMappend.N:First'[0] <a>_N) of wild {
                         FirstMappend.Nada -> FirstMappend.$fShowFirst'10
                         FirstMappend.Only b1
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              FirstMappend.$fShowFirst'5
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow
                                 FirstMappend.$fShowFirst'6
                                 b1
                                 FirstMappend.$fShowFirst'9) }))) -}
db08250cb40be7c058c16ec1829970b3
  $fShowFirst'_$cshowList ::
    GHC.Show.Show a => [FirstMappend.First' a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [FirstMappend.First' a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (FirstMappend.First' a)
                   (FirstMappend.$fShowFirst'_$cshowsPrec
                      @ a
                      $dShow
                      FirstMappend.$fShowFirst'1)
                   eta
                   eta1) -}
db08250cb40be7c058c16ec1829970b3
  $fShowFirst'_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> FirstMappend.First' a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: FirstMappend.First' a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FirstMappend.$w$cshowsPrec @ a w ww1 w2 }) -}
da4ecd2274ed6f68860e9933f0a9480a
  $fShowFirst'_$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Types.Int -> FirstMappend.Optional a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (ds1 :: FirstMappend.Optional a) ->
                 case ds1 of wild {
                   FirstMappend.Nada -> FirstMappend.$fShowFirst'7
                   FirstMappend.Only b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow FirstMappend.$fShowFirst'6 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char FirstMappend.$fShowFirst'5 (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                FirstMappend.$fShowFirst'5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x1))) } } }) -}
da4ecd2274ed6f68860e9933f0a9480a
  $fShowOptional ::
    GHC.Show.Show a => GHC.Show.Show (FirstMappend.Optional a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (FirstMappend.Optional a)
                  (FirstMappend.$fShowFirst'_$cshowsPrec1 @ a $dShow)
                  (FirstMappend.$fShowOptional_$cshow @ a $dShow)
                  (FirstMappend.$fShowOptional_$cshowList @ a $dShow) -}
da4ecd2274ed6f68860e9933f0a9480a
  $fShowOptional_$cshow ::
    GHC.Show.Show a => FirstMappend.Optional a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: FirstMappend.Optional a) ->
                 case x of wild {
                   FirstMappend.Nada -> FirstMappend.$fShowFirst'8
                   FirstMappend.Only b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        FirstMappend.$fShowFirst'5
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           FirstMappend.$fShowFirst'6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
da4ecd2274ed6f68860e9933f0a9480a
  $fShowOptional_$cshowList ::
    GHC.Show.Show a => [FirstMappend.Optional a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [FirstMappend.Optional a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (FirstMappend.Optional a)
                   (FirstMappend.$fShowFirst'_$cshowsPrec1
                      @ a
                      $dShow
                      FirstMappend.$fShowFirst'1)
                   eta
                   eta1) -}
ef3d1514604df708321b5dd2e17c302a
  $tc'First' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7677823181365405152##
                   9329738225855851820##
                   FirstMappend.$trModule
                   FirstMappend.$tc'First'1) -}
356b7c51713c98779e16994cd3fd837c
  $tc'First'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'First'"#) -}
2edb2b7f0a7058773f851315dec31dca
  $tc'Nada :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7663736390386542535##
                   4711921695344867455##
                   FirstMappend.$trModule
                   FirstMappend.$tc'Nada1) -}
c64d2850c5afd687d14fa737b8a6b362
  $tc'Nada1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nada"#) -}
f7fbbfbf876372b8e18837a07cf4673b
  $tc'Only :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17608140583098838282##
                   15128180676794757788##
                   FirstMappend.$trModule
                   FirstMappend.$tc'Only1) -}
054bcdb4bb25423e24eed2fda511d6d0
  $tc'Only1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Only"#) -}
52d64c3dde0e9f238e7c65d4abb5a3ae
  $tcFirst' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11821762942626822121##
                   10481998077846078265##
                   FirstMappend.$trModule
                   FirstMappend.$tcFirst'1) -}
0aa50aaf83d2ac18a741233e2b223183
  $tcFirst'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "First'"#) -}
97396c9b990ec7a25899c24f606b7d93
  $tcOptional :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17610727957461098340##
                   16913835760114026823##
                   FirstMappend.$trModule
                   FirstMappend.$tcOptional1) -}
b2f67c077e82d5ff4a37a379e5f3ea27
  $tcOptional1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Optional"#) -}
77f6fd89ea8ab5f920d018538da35183
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FirstMappend.$trModule2
                   FirstMappend.$trModule1) -}
a95ee9437f7760a029aded7a97c4585d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FirstMappend"#) -}
bec92a0270be0c39f2a39034670ceb6f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
db08250cb40be7c058c16ec1829970b3
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> FirstMappend.First' a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: FirstMappend.First' a) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = FirstMappend.$fShowFirst'_$cshowsPrec1
                       @ a
                       w
                       FirstMappend.$fShowFirst'1
                       w1 `cast` (FirstMappend.N:First'[0] <a>_N)
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       FirstMappend.$fShowFirst'4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          FirstMappend.$fShowFirst'3
                          (f (GHC.Base.++ @ GHC.Types.Char FirstMappend.$fShowFirst'2 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
db08250cb40be7c058c16ec1829970b3
  newtype First' a = First' {getFirst' :: FirstMappend.Optional a}
c5572baebe4a3ae7450c5b0e74ea0e24
  type FirstMappend =
    FirstMappend.First' GHC.Base.String
    -> FirstMappend.First' GHC.Base.String
    -> FirstMappend.First' GHC.Base.String
    -> GHC.Types.Bool
da4ecd2274ed6f68860e9933f0a9480a
  data Optional a = Nada | Only a
db08250cb40be7c058c16ec1829970b3
  firstMappend ::
    FirstMappend.First' a
    -> FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ds :: FirstMappend.First' a)
                   (ds1 :: FirstMappend.First' a) ->
                 case ds `cast` (FirstMappend.N:First'[0] <a>_N) of wild {
                   FirstMappend.Nada -> ds1
                   FirstMappend.Only x
                   -> (FirstMappend.Only @ a x)
                        `cast`
                      (Sym (FirstMappend.N:First'[0]) <a>_N) }) -}
2cf59b18300b1a9312017dc21ab9f6c6
  getFirst' :: FirstMappend.First' a -> FirstMappend.Optional a
  RecSel Left FirstMappend.First'
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.getFirst'1
                  `cast`
                (forall (a :: <*>_N).
                 <FirstMappend.First' a>_R ->_R FirstMappend.N:First'[0] <a>_N) -}
9d1f70f4c6fff0086f87c32af9687905
  getFirst'1 :: FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: FirstMappend.First' a) -> ds) -}
f8888c44ab7a651171324b312c7f8927
  monoidAssoc ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (a :: m)
                   (b :: m)
                   (c :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend
                      @ m
                      $dMonoid
                      a
                      (GHC.Base.mappend @ m $dMonoid b c))
                   (GHC.Base.mappend
                      @ m
                      $dMonoid
                      (GHC.Base.mappend @ m $dMonoid a b)
                      c)) -}
23cbca15d72d594771edf4d813083514
  monoidLeftIdentity ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) => m -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (m1 :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend @ m $dMonoid m1 (GHC.Base.mempty @ m $dMonoid))
                   m1) -}
770a08f4fc4d434a1e129b4fff61d00b
  monoidRightIdentity ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) => m -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   ($dEq :: GHC.Classes.Eq m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (m1 :: m) ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend @ m $dMonoid (GHC.Base.mempty @ m $dMonoid) m1)
                   m1) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [FirstMappend.First']
  = FirstMappend.$fArbitraryFirst'
instance [safe] GHC.Classes.Eq [FirstMappend.First']
  = FirstMappend.$fEqFirst'
instance [safe] GHC.Classes.Eq [FirstMappend.Optional]
  = FirstMappend.$fEqOptional
instance [safe] GHC.Base.Monoid [FirstMappend.First']
  = FirstMappend.$fMonoidFirst'
instance [safe] GHC.Show.Show [FirstMappend.First']
  = FirstMappend.$fShowFirst'
instance [safe] GHC.Show.Show [FirstMappend.Optional]
  = FirstMappend.$fShowOptional
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

