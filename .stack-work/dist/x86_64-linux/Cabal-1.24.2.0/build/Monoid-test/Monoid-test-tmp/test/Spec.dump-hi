
==================== FINAL INTERFACE ====================
2017-09-19 21:57:59.822005 UTC

interface main@main:Main 8002
  interface hash: 13ec4cce28e417d1ed2a1e447a330d75
  ABI hash: 5496394f014bee3f8404033dfc0eb109
  export-list hash: 39e03ffff411300d42059f4e71b35ca4
  orphan hash: 024f0f6596c8eeb830b8e44c1497fd02
  flag hash: 257337de22538a7e28c409e6aaccf8f8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: Monoid-0.1.0.0@Monoid-0.1.0.0-JycnzwOU5JCFKswfKp8IJx
                      QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  Monoid-0.1.0.0@Monoid-0.1.0.0-JycnzwOU5JCFKswfKp8IJx:FirstMappend a678a226fff7d65b5f011d3d8f3ec0e4
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Test 278e44364c047a37baa96fcc59922ae9
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
d3eb256cb401e04a5d4bc2dd284638b1
  $s$fArbitraryFirst'1 ::
    FirstMappend.First' [GHC.Types.Char]
    -> [FirstMappend.First' [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: FirstMappend.First' [GHC.Types.Char]) ->
                 GHC.Types.[] @ (FirstMappend.First' [GHC.Types.Char])) -}
bb23e4fe2f8cd3655cfe7b57e42a1887
  $s$fArbitraryFirst'_$s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Char]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Test.QuickCheck.Arbitrary.$fArbitrary[]_$carbitrary
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                  Main.$s$fArbitraryFirst'_$s$fArbitrary[]_$cshrink -}
f4f3ba852ed25c966207e9dad5bd3c93
  $s$fArbitraryFirst'_$s$fArbitrary[]_$cshrink ::
    [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: [GHC.Types.Char]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                   xs) -}
c073907081720e04ca5dbc9cceaa2308
  $s$fEqFirst'1 :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
c2696bee0701916719d612a3db474023
  $s$fShowFirst' ::
    GHC.Show.Show (FirstMappend.First' [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (FirstMappend.First' [GHC.Types.Char])
                  (FirstMappend.$fShowFirst'_$cshowsPrec
                     @ [GHC.Types.Char]
                     Main.$s$fShowFirst'2)
                  (FirstMappend.$fShowFirst'_$cshow
                     @ [GHC.Types.Char]
                     Main.$s$fShowFirst'2)
                  Main.$s$fShowFirst'1 -}
b6999b50f19abe9d749aee105bee3060
  $s$fShowFirst'1 ::
    [FirstMappend.First' [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [FirstMappend.First' [GHC.Types.Char]])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (FirstMappend.First' [GHC.Types.Char])
                   (\ (w2 :: FirstMappend.First' [GHC.Types.Char]) ->
                    FirstMappend.$w$cshowsPrec
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      0#
                      w2)
                   eta
                   eta1) -}
bbb517187f87bdf0f97468497abb8010
  $s$fShowFirst'2 :: GHC.Show.Show [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
866c4ca3587b964c1d597bb3c4b78460
  $smonoidRightIdentity ::
    FirstMappend.First' GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (m1 :: FirstMappend.First' GHC.Base.String) ->
                 FirstMappend.$fEqFirst'_$c==
                   @ [GHC.Types.Char]
                   Main.$s$fEqFirst'1
                   (FirstMappend.$fMonoidFirst'_$cmappend
                      @ [GHC.Types.Char]
                      (FirstMappend.Nada @ [GHC.Types.Char])
                        `cast`
                      (Sym (FirstMappend.N:First'[0]) <[GHC.Types.Char]>_N)
                      m1)
                   m1) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
514f290ecdcd42aca2f60da2bb63fd11
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d30b4da26ed712c0a8e9789fd5a666d1
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ FirstMappend.FirstMappend
                        Main.main4
                          `cast`
                        (Trans
                             (<FirstMappend.First' GHC.Base.String
                               -> FirstMappend.First' GHC.Base.String
                               -> FirstMappend.First' GHC.Base.String
                               -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <FirstMappend.First' GHC.Base.String
                                        -> FirstMappend.First' GHC.Base.String
                                        -> FirstMappend.First' GHC.Base.String
                                        -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.main3
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (FirstMappend.First' GHC.Base.String -> GHC.Types.Bool)
                        Main.main2
                          `cast`
                        (Trans
                             (<FirstMappend.First' GHC.Base.String -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <FirstMappend.First' GHC.Base.String -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.$smonoidRightIdentity
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (FirstMappend.First' GHC.Base.String -> GHC.Types.Bool)
                        Main.main2
                          `cast`
                        (Trans
                             (<FirstMappend.First' GHC.Base.String -> GHC.Types.Bool>_R
                              ->_R Trans
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                 (Test.QuickCheck.Property.N:Prop[0])))
                                       (Sym (Test.QuickCheck.Property.N:Property[0])))
                             (Sym (Test.QuickCheck.Property.N:Testable[0]
                                       <FirstMappend.First' GHC.Base.String -> GHC.Types.Bool>_N)))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.$smonoidRightIdentity
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } }) -}
0c43ec166c90315052db36ebfd7f78aa
  main2 ::
    (FirstMappend.First' GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: FirstMappend.First' GHC.Base.String -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (FirstMappend.First' GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.$s$fShowFirst'
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   (FirstMappend.$fArbitraryFirst'1
                      @ [GHC.Types.Char]
                      Main.$s$fArbitraryFirst'_$s$fArbitrary[])
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <FirstMappend.First' [GHC.Types.Char]>_R))
                   Main.$s$fArbitraryFirst'1
                   f
                   eta
                   eta1) -}
7f46b577d775de8c635443eedc80a00b
  main3 ::
    FirstMappend.First' GHC.Base.String
    -> FirstMappend.First' GHC.Base.String
    -> FirstMappend.First' GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (a :: FirstMappend.First' GHC.Base.String)
                   (b :: FirstMappend.First' GHC.Base.String)
                   (c :: FirstMappend.First' GHC.Base.String) ->
                 let {
                   $j :: [GHC.Types.Char] -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (a1 :: [GHC.Types.Char])[OneShot] ->
                     case a `cast`
                          (FirstMappend.N:First'[0] <[GHC.Types.Char]>_N) of wild {
                       FirstMappend.Nada
                       -> case b `cast`
                               (FirstMappend.N:First'[0] <[GHC.Types.Char]>_N) of wild1 {
                            FirstMappend.Nada
                            -> case c `cast`
                                    (FirstMappend.N:First'[0] <[GHC.Types.Char]>_N) of wild2 {
                                 FirstMappend.Nada -> GHC.Types.False
                                 FirstMappend.Only b1 -> GHC.Base.eqString a1 b1 }
                            FirstMappend.Only x -> GHC.Base.eqString a1 x }
                       FirstMappend.Only x -> GHC.Base.eqString a1 x }
                 } in
                 case a `cast`
                      (FirstMappend.N:First'[0] <[GHC.Types.Char]>_N) of wild {
                   FirstMappend.Nada
                   -> case b `cast`
                           (FirstMappend.N:First'[0] <[GHC.Types.Char]>_N) of wild1 {
                        FirstMappend.Nada
                        -> case c `cast`
                                (FirstMappend.N:First'[0] <[GHC.Types.Char]>_N) of wild2 {
                             FirstMappend.Nada -> GHC.Types.True FirstMappend.Only a1 -> $j a1 }
                        FirstMappend.Only x -> $j x }
                   FirstMappend.Only x -> $j x }) -}
49d7455e21045bf984bc57c0aa8c56c0
  main4 ::
    (FirstMappend.First' GHC.Base.String
     -> FirstMappend.First' GHC.Base.String
     -> FirstMappend.First' GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Unfolding: (\ (f :: FirstMappend.First' GHC.Base.String
                         -> FirstMappend.First' GHC.Base.String
                         -> FirstMappend.First' GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (FirstMappend.First' GHC.Base.String)
                   @ (FirstMappend.First' GHC.Base.String
                      -> FirstMappend.First' GHC.Base.String -> GHC.Types.Bool)
                   Main.$s$fShowFirst'
                   Main.main6
                     `cast`
                   (Trans
                        (<FirstMappend.First' GHC.Base.String
                          -> FirstMappend.First' GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <FirstMappend.First' GHC.Base.String
                                   -> FirstMappend.First' GHC.Base.String -> GHC.Types.Bool>_N)))
                   Main.main5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <FirstMappend.First' [GHC.Types.Char]>_R))
                   Main.$s$fArbitraryFirst'1
                   f
                   eta
                   eta1) -}
de796de936ad4e494ad11fa57a567dbf
  main5 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FirstMappend.First' [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (FirstMappend.$fArbitraryFirst'1
                   @ [GHC.Types.Char]
                   Main.$s$fArbitraryFirst'_$s$fArbitrary[]) -}
9307a77621c894279bb3c0234db6a6b3
  main6 ::
    (FirstMappend.First' GHC.Base.String
     -> FirstMappend.First' GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: FirstMappend.First' GHC.Base.String
                         -> FirstMappend.First' GHC.Base.String -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ (FirstMappend.First' GHC.Base.String)
                   @ (FirstMappend.First' GHC.Base.String -> GHC.Types.Bool)
                   Main.$s$fShowFirst'
                   Main.main2
                     `cast`
                   (Trans
                        (<FirstMappend.First' GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <FirstMappend.First' GHC.Base.String -> GHC.Types.Bool>_N)))
                   (FirstMappend.$fArbitraryFirst'1
                      @ [GHC.Types.Char]
                      Main.$s$fArbitraryFirst'_$s$fArbitrary[])
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <FirstMappend.First' [GHC.Types.Char]>_R))
                   Main.$s$fArbitraryFirst'1
                   f
                   eta
                   eta1) -}
4171c87b01b6fca2a1ea7731fe9fca00
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fArbitrary[] @ Char" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                   GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Char
                                          $dArbitrary
  = Main.$s$fArbitraryFirst'_$s$fArbitrary[]
"SPEC/Main $fArbitrary[]_$cshrink @ Char" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                            GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[]_$cshrink @ GHC.Types.Char
                                                   $dArbitrary
  = Main.$s$fArbitraryFirst'_$s$fArbitrary[]_$cshrink
"SPEC/Main $fShowFirst' @ [Char]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                               [GHC.Types.Char])
  FirstMappend.$fShowFirst' @ [GHC.Types.Char] $dShow
  = Main.$s$fShowFirst'
"SPEC/Main monoidRightIdentity @ (First' String)" [ALWAYS] forall ($dMonoid :: GHC.Base.Monoid
                                                                                 (FirstMappend.First'
                                                                                    GHC.Base.String))
                                                                  ($dEq :: GHC.Classes.Eq
                                                                             (FirstMappend.First'
                                                                                GHC.Base.String))
  FirstMappend.monoidRightIdentity @ (FirstMappend.First'
                                        GHC.Base.String)
                                   $dEq
                                   $dMonoid
  = Main.$smonoidRightIdentity
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

