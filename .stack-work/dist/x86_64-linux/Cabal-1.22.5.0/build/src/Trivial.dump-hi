
==================== FINAL INTERFACE ====================
2017-09-29 11:56:24.141394 UTC

interface Monoi_36px53ZPhG84BimjxB5yeC:Trivial 7103
  interface hash: bc4770b833d7678ed8bf5ed062a2e5a0
  ABI hash: d45d6d29180e80f6e784747132be2d8c
  export-list hash: a6a791d34ab52703630a7351efdbd94a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Trivial.semigroupAssoc
  Trivial.Trivial{Trivial.Trivial}
  Trivial.TrivialAssoc
module dependencies:
package dependencies: QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      array-0.5.1.1@array_GYDb2ArsFSSIHqSGBYOjLV base-4.8.2.0*
                      binary-0.8.3.0@binar_HgfnugDrjlN23m2aiAUfJZ
                      bytestring-0.10.8.1@bytes_3TyVKV2NA2yDNWNtA3XuhS
                      containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe
                      deepseq-1.4.2.0@deeps_5CvZ3NruJCLG6fI7ct2neg
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.6.1@hasha_EEi7m9vZzBxBk2VLNi3oLU integer-gmp-1.0.0.0
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.2.0@primi_3TuOs80vGzIBbdFePa9jNW
                      random-1.1@rando_ErsaxGdx2qN9xGxJzmzYmh
                      semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp*
                      tagged-0.8.5@tagge_HDgkupRsqP51Dl3VYHbacM template-haskell-2.10.0.0
                      text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9
                      tf-random-0.5@tfran_0KoOJ8vyUWi63yKroqCxAy
                      time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV
                      transformers-0.5.2.0@trans_0oxumI52RQNEUg5dM0tOmZ
                      unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.8.3.0@binar_HgfnugDrjlN23m2aiAUfJZ:Data.Binary.Generic
         bytestring-0.10.8.1@bytes_3TyVKV2NA2yDNWNtA3XuhS:Data.ByteString.Builder
         hashable-1.2.6.1@hasha_EEi7m9vZzBxBk2VLNi3oLU:Data.Hashable.Generic
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Lazy
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Show
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.Format.Parse
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@trans_0oxumI52RQNEUg5dM0tOmZ:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.IntMap.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.IntSet.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Map.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Sequence
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primi_3TuOs80vGzIBbdFePa9jNW:Control.Monad.Primitive
                         semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.List.NonEmpty
                         semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.Semigroup
                         tagged-0.8.5@tagge_HDgkupRsqP51Dl3VYHbacM:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text
                         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD:Data.HashSet
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck 418c727fda07763ee8c9886421683eb3
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck.Arbitrary 8fd714c1aa0b696271aa178223178a73
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.Semigroup ab01b5704defdf2bfd4bd9d2261dc02e
2f464173d97367441f35a2a4bf197b33
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Trivial.Trivial
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trivial.Trivial
                  Trivial.$fArbitraryTrivial_$carbitrary
                  Trivial.$fArbitraryTrivial_$s$dmshrink -}
2f464173d97367441f35a2a4bf197b33
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Trivial.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Test.QuickCheck.Random.QCGen ds1 :: GHC.Types.Int ->
                 Trivial.Trivial) -}
2f464173d97367441f35a2a4bf197b33
  $fArbitraryTrivial_$carbitrary ::
    Test.QuickCheck.Gen.Gen Trivial.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Trivial.$fArbitraryTrivial1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <Trivial.Trivial>_R)) -}
2f464173d97367441f35a2a4bf197b33
  $fArbitraryTrivial_$s$dmshrink ::
    Trivial.Trivial -> [Trivial.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: Trivial.Trivial -> GHC.Types.[] @ Trivial.Trivial) -}
2f464173d97367441f35a2a4bf197b33
  $fEqTrivial :: GHC.Classes.Eq Trivial.Trivial
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trivial.Trivial
                  Trivial.$fEqTrivial_$c==
                  Trivial.$fEqTrivial_$c/= -}
2f464173d97367441f35a2a4bf197b33
  $fEqTrivial_$c/= ::
    Trivial.Trivial -> Trivial.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Trivial.Trivial b :: Trivial.Trivial ->
                 case a1 of wild { Trivial.Trivial ->
                 case b of wild1 { Trivial.Trivial -> GHC.Types.False } }) -}
2f464173d97367441f35a2a4bf197b33
  $fEqTrivial_$c== ::
    Trivial.Trivial -> Trivial.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Trivial.Trivial ds1 :: Trivial.Trivial ->
                 case ds of wild { Trivial.Trivial ->
                 case ds1 of wild1 { Trivial.Trivial -> GHC.Types.True } }) -}
2f464173d97367441f35a2a4bf197b33
  $fSemigroupTrivial :: Data.Semigroup.Semigroup Trivial.Trivial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trivial.Trivial
                  Trivial.$fSemigroupTrivial_$c<>
                  Trivial.$fSemigroupTrivial_$csconcat
                  Trivial.$fSemigroupTrivial_$cstimes -}
2f464173d97367441f35a2a4bf197b33
  $fSemigroupTrivial_$c<> ::
    Trivial.Trivial -> Trivial.Trivial -> Trivial.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Trivial.Trivial ds1 :: Trivial.Trivial ->
                 Trivial.Trivial) -}
2f464173d97367441f35a2a4bf197b33
  $fSemigroupTrivial_$csconcat ::
    Data.List.NonEmpty.NonEmpty Trivial.Trivial -> Trivial.Trivial
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U(),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Data.List.NonEmpty.NonEmpty Trivial.Trivial ->
                 case ds of wild { Data.List.NonEmpty.:| a31 as ->
                 case as of wild1 { [] -> a31 : c cs -> Trivial.Trivial } }) -}
2f464173d97367441f35a2a4bf197b33
  $fSemigroupTrivial_$cstimes ::
    GHC.Real.Integral b => b -> Trivial.Trivial -> Trivial.Trivial
  {- Arity: 3,
     Strictness: <S(SLLLLLLLL),U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U()>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ b
                   $dIntegral :: GHC.Real.Integral b
                   eta :: b
                   eta1 :: Trivial.Trivial ->
                 let {
                   $dReal :: GHC.Real.Real b = GHC.Real.$p1Integral @ b $dIntegral
                 } in
                 case GHC.Classes.<=
                        @ b
                        (GHC.Real.$p2Real @ b $dReal)
                        eta
                        (GHC.Num.fromInteger
                           @ b
                           (GHC.Real.$p1Real @ b $dReal)
                           __integer 0) of wild {
                   GHC.Types.False
                   -> let {
                        $dReal1 :: GHC.Real.Real b = GHC.Real.$p1Integral @ b $dIntegral
                      } in
                      let {
                        $dEnum :: GHC.Enum.Enum b = GHC.Real.$p2Integral @ b $dIntegral
                      } in
                      let {
                        a31 :: GHC.Classes.Ord b = GHC.Real.$p2Real @ b $dReal1
                      } in
                      let {
                        $dEq :: GHC.Classes.Eq b = GHC.Classes.$p1Ord @ b a31
                      } in
                      let {
                        $dNum :: GHC.Num.Num b = GHC.Real.$p1Real @ b $dReal1
                      } in
                      letrec {
                        f :: Trivial.Trivial -> b -> Trivial.Trivial {- Arity: 2 -}
                        = \ x :: Trivial.Trivial y :: b ->
                          case GHC.Real.even @ b $dIntegral y of wild1 {
                            GHC.Types.False
                            -> case GHC.Classes.==
                                      @ b
                                      $dEq
                                      y
                                      (GHC.Num.fromInteger @ b $dNum __integer 1) of wild2 {
                                 GHC.Types.False
                                 -> let {
                                      $dReal2 :: GHC.Real.Real b
                                      = GHC.Real.$p1Integral @ b $dIntegral
                                    } in
                                    let {
                                      $dEnum1 :: GHC.Enum.Enum b
                                      = GHC.Real.$p2Integral @ b $dIntegral
                                    } in
                                    let {
                                      a32 :: GHC.Classes.Ord b = GHC.Real.$p2Real @ b $dReal2
                                    } in
                                    let {
                                      $dEq1 :: GHC.Classes.Eq b = GHC.Classes.$p1Ord @ b a32
                                    } in
                                    let {
                                      $dNum1 :: GHC.Num.Num b = GHC.Real.$p1Real @ b $dReal2
                                    } in
                                    letrec {
                                      g :: Trivial.Trivial
                                           -> b -> Trivial.Trivial -> Trivial.Trivial
                                        {- Arity: 3 -}
                                      = \ x1 :: Trivial.Trivial y1 :: b z :: Trivial.Trivial ->
                                        case GHC.Real.even @ b $dIntegral y1 of wild3 {
                                          GHC.Types.False
                                          -> case GHC.Classes.==
                                                    @ b
                                                    $dEq1
                                                    y1
                                                    (GHC.Num.fromInteger
                                                       @ b
                                                       $dNum1
                                                       __integer 1) of wild4 {
                                               GHC.Types.False
                                               -> g (Trivial.$fSemigroupTrivial_$c<> x1 x1)
                                                    (GHC.Real.quot
                                                       @ b
                                                       $dIntegral
                                                       (GHC.Enum.pred @ b $dEnum1 y1)
                                                       (GHC.Num.fromInteger @ b $dNum1 __integer 2))
                                                    (Trivial.$fSemigroupTrivial_$c<> x1 z)
                                               GHC.Types.True
                                               -> Trivial.$fSemigroupTrivial_$c<> x1 z }
                                          GHC.Types.True
                                          -> g (Trivial.$fSemigroupTrivial_$c<> x1 x1)
                                               (GHC.Real.quot
                                                  @ b
                                                  $dIntegral
                                                  y1
                                                  (GHC.Num.fromInteger @ b $dNum1 __integer 2))
                                               z }
                                    } in
                                    g (Trivial.$fSemigroupTrivial_$c<> x x)
                                      (GHC.Real.quot
                                         @ b
                                         $dIntegral
                                         (GHC.Enum.pred @ b $dEnum y)
                                         (GHC.Num.fromInteger @ b $dNum __integer 2))
                                      x
                                 GHC.Types.True -> x }
                            GHC.Types.True
                            -> f (Trivial.$fSemigroupTrivial_$c<> x x)
                                 (GHC.Real.quot
                                    @ b
                                    $dIntegral
                                    y
                                    (GHC.Num.fromInteger @ b $dNum __integer 2)) }
                      } in
                      f eta1 eta
                   GHC.Types.True
                   -> GHC.Err.error
                        @ Trivial.Trivial
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b1 ->
                            GHC.CString.unpackFoldrCString#
                              @ b1
                              "stimes: positive multiplier expected"#)) }) -}
2f464173d97367441f35a2a4bf197b33
  $fShowTrivial :: GHC.Show.Show Trivial.Trivial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trivial.Trivial
                  Trivial.$fShowTrivial_$cshowsPrec
                  Trivial.$fShowTrivial_$cshow
                  Trivial.$fShowTrivial_$cshowList -}
2f464173d97367441f35a2a4bf197b33
  $fShowTrivial1 :: Trivial.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Trivial.Trivial eta :: GHC.Base.String ->
                 case ds of wild { Trivial.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Trivial.$fShowTrivial2)
                   eta }) -}
d87741ecca0fd120227d2f73cb547db5
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Trivial"#) -}
2f464173d97367441f35a2a4bf197b33
  $fShowTrivial_$cshow :: Trivial.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Trivial.Trivial ->
                 case x of wild { Trivial.Trivial -> Trivial.$fShowTrivial2 }) -}
2f464173d97367441f35a2a4bf197b33
  $fShowTrivial_$cshowList :: [Trivial.Trivial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Trivial.Trivial
                   Trivial.$fShowTrivial1) -}
2f464173d97367441f35a2a4bf197b33
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Trivial.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Trivial.Trivial
                   eta :: GHC.Base.String ->
                 case ds1 of wild { Trivial.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Trivial.$fShowTrivial2)
                   eta }) -}
2f464173d97367441f35a2a4bf197b33
  data Trivial = Trivial
    Promotable
455bd7d9560ae070493166ec1dfb3c07
  type TrivialAssoc =
    Trivial.Trivial
    -> Trivial.Trivial -> Trivial.Trivial -> GHC.Types.Bool
379d47970643557f88f6bc0c5151afb8
  semigroupAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   $dEq :: GHC.Classes.Eq m
                   $dSemigroup :: Data.Semigroup.Semigroup m
                   a1 :: m
                   b :: m
                   c :: m ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a1
                      (Data.Semigroup.<> @ m $dSemigroup b c))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a1 b)
                      c)) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Trivial.Trivial]
  = Trivial.$fArbitraryTrivial
instance GHC.Classes.Eq [Trivial.Trivial] = Trivial.$fEqTrivial
instance Data.Semigroup.Semigroup [Trivial.Trivial]
  = Trivial.$fSemigroupTrivial
instance GHC.Show.Show [Trivial.Trivial] = Trivial.$fShowTrivial
"SPEC/Trivial $dmshrink @ Trivial" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                    Trivial.Trivial
  Test.QuickCheck.Arbitrary.$dmshrink @ Trivial.Trivial $dArbitrary
  = Trivial.$fArbitraryTrivial_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

