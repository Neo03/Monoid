
==================== FINAL INTERFACE ====================
2017-09-24 17:19:33.168839 UTC

interface Monoi_2DwV2LGLXUsKBvW2cIESNv:FirstMappend 7103
  interface hash: 2bd4b0dabb1f5798ebe1b9e79af585f7
  ABI hash: 5ba7c3aafb0dd6c5599f5f6aeb6d46d0
  export-list hash: fb181653d493e26dca4442b2b84227a0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  FirstMappend.firstMappend
  FirstMappend.monoidAssoc
  FirstMappend.monoidLeftIdentity
  FirstMappend.monoidRightIdentity
  FirstMappend.First'{FirstMappend.First' FirstMappend.getFirst'}
  FirstMappend.FirstMappend
  FirstMappend.Optional{FirstMappend.Nada FirstMappend.Only}
module dependencies:
package dependencies: QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      array-0.5.1.1@array_GYDb2ArsFSSIHqSGBYOjLV base-4.8.2.0*
                      binary-0.8.3.0@binar_HgfnugDrjlN23m2aiAUfJZ
                      bytestring-0.10.8.1@bytes_3TyVKV2NA2yDNWNtA3XuhS
                      containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe
                      deepseq-1.4.2.0@deeps_5CvZ3NruJCLG6fI7ct2neg
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.6.1@hasha_EEi7m9vZzBxBk2VLNi3oLU integer-gmp-1.0.0.0
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.2.0@primi_3TuOs80vGzIBbdFePa9jNW
                      random-1.1@rando_ErsaxGdx2qN9xGxJzmzYmh
                      semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp
                      template-haskell-2.10.0.0 text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9
                      tf-random-0.5@tfran_0KoOJ8vyUWi63yKroqCxAy
                      time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV
                      transformers-0.5.2.0@trans_0oxumI52RQNEUg5dM0tOmZ
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.8.3.0@binar_HgfnugDrjlN23m2aiAUfJZ:Data.Binary.Generic
         bytestring-0.10.8.1@bytes_3TyVKV2NA2yDNWNtA3XuhS:Data.ByteString.Builder
         hashable-1.2.6.1@hasha_EEi7m9vZzBxBk2VLNi3oLU:Data.Hashable.Generic
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Lazy
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Show
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.Format.Parse
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@trans_0oxumI52RQNEUg5dM0tOmZ:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.IntMap.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.IntSet.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Map.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Sequence
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primi_3TuOs80vGzIBbdFePa9jNW:Control.Monad.Primitive
                         semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.List.NonEmpty
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text
                         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Lazy
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck 418c727fda07763ee8c9886421683eb3
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck.Arbitrary 8fd714c1aa0b696271aa178223178a73
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck.Gen 32cc76b256b1f90127c4900263769201
import  -/  base-4.8.2.0:Data.Monoid 85b292b52bfd80ed619cddb767d638d3
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
78a9e34675fd377633911fe1509b57ac
  $fArbitraryFirst' ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (FirstMappend.First' a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a.
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fArbitraryFirst'_$carbitrary @ a $dArbitrary)
                  (FirstMappend.$fArbitraryFirst'_$cshrink @ a $dArbitrary) -}
78a9e34675fd377633911fe1509b57ac
  $fArbitraryFirst'1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FirstMappend.First' a
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a
                   eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0]))) } }
                 } in
                 let {
                   x :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.NTCo:Gen[0] <a>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (FirstMappend.First' a)
                    (GHC.Types.:
                       @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
                       (FirstMappend.$fArbitraryFirst'3 @ a)
                       (GHC.Types.:
                          @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
                          (FirstMappend.$fArbitraryFirst'2,
                           let {
                             a1 :: FirstMappend.Optional a = FirstMappend.Only @ a x
                           } in
                           (\ ds :: Test.QuickCheck.Random.QCGen ds2 :: GHC.Types.Int -> a1)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                     (FirstMappend.NTCo:First'[0] <a>_N))))
                          (GHC.Types.[]
                             @ (GHC.Types.Int,
                                Test.QuickCheck.Gen.Gen (FirstMappend.First' a))))))
                   `cast`
                 (Test.QuickCheck.Gen.NTCo:Gen[0] <FirstMappend.First' a>_R)
                   (case ds1 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
02415aa7827da1d528cebac64970f454
  $fArbitraryFirst'2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
78a9e34675fd377633911fe1509b57ac
  $fArbitraryFirst'3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen (FirstMappend.First' a))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ a ->
                 (FirstMappend.$fArbitraryFirst'2,
                  (FirstMappend.$fArbitraryFirst'4 @ a)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                            (FirstMappend.NTCo:First'[0] <a>_N))))) -}
afc4103e86204803e1bd7cf38e481cd6
  $fArbitraryFirst'4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FirstMappend.Optional a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a ds :: Test.QuickCheck.Random.QCGen ds1 :: GHC.Types.Int ->
                 FirstMappend.Nada @ a) -}
78a9e34675fd377633911fe1509b57ac
  $fArbitraryFirst'_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (FirstMappend.First' a)
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fArbitraryFirst'1
                  `cast`
                (forall a.
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <FirstMappend.First' a>_R)) -}
78a9e34675fd377633911fe1509b57ac
  $fArbitraryFirst'_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    FirstMappend.First' a -> [FirstMappend.First' a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a
                   ds1 :: FirstMappend.First' a ->
                 GHC.Types.[] @ (FirstMappend.First' a)) -}
78a9e34675fd377633911fe1509b57ac
  $fEqFirst' ::
    GHC.Classes.Eq a => GHC.Classes.Eq (FirstMappend.First' a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fEqFirst'_$c== @ a $dEq)
                  (FirstMappend.$fEqFirst'_$c/= @ a $dEq) -}
78a9e34675fd377633911fe1509b57ac
  $fEqFirst'_$c/= ::
    GHC.Classes.Eq a =>
    FirstMappend.First' a -> FirstMappend.First' a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fEqFirst'_$c/=1
                  `cast`
                (forall a.
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (FirstMappend.NTCo:First'[0]) <a>_N
                 ->_R Sym (FirstMappend.NTCo:First'[0]) <a>_N
                 ->_R <GHC.Types.Bool>_R) -}
3da3d2baba77f1bf23f31c33fe1b43f3
  $fEqFirst'_$c/=1 ::
    GHC.Classes.Eq a =>
    FirstMappend.Optional a
    -> FirstMappend.Optional a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   $dEq :: GHC.Classes.Eq a
                   a1 :: FirstMappend.Optional a
                   b :: FirstMappend.Optional a ->
                 case a1 of wild {
                   FirstMappend.Nada
                   -> case b of wild1 {
                        FirstMappend.Nada -> GHC.Types.False
                        FirstMappend.Only ipv -> GHC.Types.True }
                   FirstMappend.Only a2
                   -> case b of wild1 {
                        FirstMappend.Nada -> GHC.Types.True
                        FirstMappend.Only b1
                        -> case GHC.Classes.== @ a $dEq a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
78a9e34675fd377633911fe1509b57ac
  $fEqFirst'_$c== ::
    GHC.Classes.Eq a =>
    FirstMappend.First' a -> FirstMappend.First' a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.$fEqFirst'_$c==1
                  `cast`
                (forall a.
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (FirstMappend.NTCo:First'[0]) <a>_N
                 ->_R Sym (FirstMappend.NTCo:First'[0]) <a>_N
                 ->_R <GHC.Types.Bool>_R) -}
3da3d2baba77f1bf23f31c33fe1b43f3
  $fEqFirst'_$c==1 ::
    GHC.Classes.Eq a =>
    FirstMappend.Optional a
    -> FirstMappend.Optional a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dEq :: GHC.Classes.Eq a
                   ds :: FirstMappend.Optional a
                   ds1 :: FirstMappend.Optional a ->
                 case ds of wild {
                   FirstMappend.Nada
                   -> case ds1 of wild1 {
                        FirstMappend.Nada -> GHC.Types.True
                        FirstMappend.Only ipv -> GHC.Types.False }
                   FirstMappend.Only a1
                   -> case ds1 of wild1 {
                        FirstMappend.Nada -> GHC.Types.False
                        FirstMappend.Only b1 -> GHC.Classes.== @ a $dEq a1 b1 } }) -}
3da3d2baba77f1bf23f31c33fe1b43f3
  $fEqOptional ::
    GHC.Classes.Eq a => GHC.Classes.Eq (FirstMappend.Optional a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (FirstMappend.Optional a)
                  (FirstMappend.$fEqFirst'_$c==1 @ a $dEq)
                  (FirstMappend.$fEqFirst'_$c/=1 @ a $dEq) -}
78a9e34675fd377633911fe1509b57ac
  $fMonoidFirst' :: GHC.Base.Monoid (FirstMappend.First' a)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (FirstMappend.First' a)
                  (FirstMappend.Nada @ a)
                    `cast`
                  (Sym (FirstMappend.NTCo:First'[0]) <a>_N)
                  (FirstMappend.$fMonoidFirst'_$cmappend @ a)
                  (FirstMappend.$fMonoidFirst'_$cmconcat @ a) -}
78a9e34675fd377633911fe1509b57ac
  $fMonoidFirst'1 :: [FirstMappend.First' a] -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
78a9e34675fd377633911fe1509b57ac
  $fMonoidFirst'_$cmappend ::
    FirstMappend.First' a
    -> FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True) FirstMappend.firstMappend -}
78a9e34675fd377633911fe1509b57ac
  $fMonoidFirst'_$cmconcat ::
    [FirstMappend.First' a] -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a eta :: [FirstMappend.First' a] ->
                 FirstMappend.$fMonoidFirst'1 @ a eta) -}
78a9e34675fd377633911fe1509b57ac
  $fShowFirst' ::
    GHC.Show.Show a => GHC.Show.Show (FirstMappend.First' a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (FirstMappend.First' a)
                  (FirstMappend.$fShowFirst'_$cshowsPrec @ a $dShow)
                  (FirstMappend.$fShowFirst'_$cshow @ a $dShow)
                  (FirstMappend.$fShowFirst'_$cshowList @ a $dShow) -}
748b40c07ac80a30dcd9cdef5f1c6e13
  $fShowFirst'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
3e0b9dc6b5c44acd9b44817c492b0be6
  $fShowFirst'10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'8
                   FirstMappend.$fShowFirst'9) -}
4f3fa339cc2d6f0c2ff61597c2edbffb
  $fShowFirst'2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
0cbf8822bf5ad89902d469aaf4028eab
  $fShowFirst'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getFirst' = "#) -}
2834571f5031f4b752761e91c1688b18
  $fShowFirst'4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "First' {"#) -}
1bf8290d21cb64938f90b3877b7cfe20
  $fShowFirst'5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Only "#) -}
5945b6d142ce9a6b49018f1c0bd081f8
  $fShowFirst'6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
8b96e63fd64eba380f85dcb1a185c16c
  $fShowFirst'7 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'8) -}
53032c5e3d81c3f380a52f2ad29f982a
  $fShowFirst'8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nada"#) -}
4f487bab1000915eed5d90a68bf814d0
  $fShowFirst'9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
78a9e34675fd377633911fe1509b57ac
  $fShowFirst'_$cshow ::
    GHC.Show.Show a => FirstMappend.First' a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: (\ @ a
                   $dShow :: GHC.Show.Show a
                   x :: FirstMappend.First' a ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   FirstMappend.$fShowFirst'4
                   (GHC.Base.++
                      @ GHC.Types.Char
                      FirstMappend.$fShowFirst'3
                      (case x `cast` (FirstMappend.NTCo:First'[0] <a>_N) of wild {
                         FirstMappend.Nada -> FirstMappend.$fShowFirst'10
                         FirstMappend.Only b1
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              FirstMappend.$fShowFirst'5
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow
                                 FirstMappend.$fShowFirst'6
                                 b1
                                 FirstMappend.$fShowFirst'9) }))) -}
78a9e34675fd377633911fe1509b57ac
  $fShowFirst'_$cshowList ::
    GHC.Show.Show a => [FirstMappend.First' a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [FirstMappend.First' a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (FirstMappend.First' a)
                   (FirstMappend.$fShowFirst'_$cshowsPrec
                      @ a
                      $dShow
                      FirstMappend.$fShowFirst'1)
                   eta
                   eta1) -}
78a9e34675fd377633911fe1509b57ac
  $fShowFirst'_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> FirstMappend.First' a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   w :: GHC.Show.Show a
                   w1 :: GHC.Types.Int
                   w2 :: FirstMappend.First' a ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 FirstMappend.$w$cshowsPrec @ a w ww1 w2 }) -}
3da3d2baba77f1bf23f31c33fe1b43f3
  $fShowFirst'_$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Types.Int -> FirstMappend.Optional a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   $dShow :: GHC.Show.Show a
                   ds :: GHC.Types.Int
                   ds1 :: FirstMappend.Optional a ->
                 case ds1 of wild {
                   FirstMappend.Nada -> FirstMappend.$fShowFirst'7
                   FirstMappend.Only b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow FirstMappend.$fShowFirst'6 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char FirstMappend.$fShowFirst'5 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                FirstMappend.$fShowFirst'5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } } }) -}
3da3d2baba77f1bf23f31c33fe1b43f3
  $fShowOptional ::
    GHC.Show.Show a => GHC.Show.Show (FirstMappend.Optional a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (FirstMappend.Optional a)
                  (FirstMappend.$fShowFirst'_$cshowsPrec1 @ a $dShow)
                  (FirstMappend.$fShowOptional_$cshow @ a $dShow)
                  (FirstMappend.$fShowOptional_$cshowList @ a $dShow) -}
3da3d2baba77f1bf23f31c33fe1b43f3
  $fShowOptional_$cshow ::
    GHC.Show.Show a => FirstMappend.Optional a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   $dShow :: GHC.Show.Show a
                   x :: FirstMappend.Optional a ->
                 case x of wild {
                   FirstMappend.Nada -> FirstMappend.$fShowFirst'8
                   FirstMappend.Only b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        FirstMappend.$fShowFirst'5
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           FirstMappend.$fShowFirst'6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
3da3d2baba77f1bf23f31c33fe1b43f3
  $fShowOptional_$cshowList ::
    GHC.Show.Show a => [FirstMappend.Optional a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [FirstMappend.Optional a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (FirstMappend.Optional a)
                   (FirstMappend.$fShowFirst'_$cshowsPrec1
                      @ a
                      $dShow
                      FirstMappend.$fShowFirst'1)
                   eta
                   eta1) -}
78a9e34675fd377633911fe1509b57ac
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> FirstMappend.First' a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: GHC.Show.Show a
                   ww :: GHC.Prim.Int#
                   w1 :: FirstMappend.First' a ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = FirstMappend.$fShowFirst'_$cshowsPrec1
                       @ a
                       w
                       FirstMappend.$fShowFirst'1
                       w1 `cast` (FirstMappend.NTCo:First'[0] <a>_N)
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       FirstMappend.$fShowFirst'4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          FirstMappend.$fShowFirst'3
                          (f (GHC.Base.++ @ GHC.Types.Char FirstMappend.$fShowFirst'2 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
78a9e34675fd377633911fe1509b57ac
  newtype First' a = First' {getFirst' :: FirstMappend.Optional a}
    Promotable
e4603e79f51037dabd264116a9bab4d0
  type FirstMappend =
    FirstMappend.First' GHC.Base.String
    -> FirstMappend.First' GHC.Base.String
    -> FirstMappend.First' GHC.Base.String
    -> GHC.Types.Bool
3da3d2baba77f1bf23f31c33fe1b43f3
  data Optional a = Nada | Only a
    Promotable
78a9e34675fd377633911fe1509b57ac
  firstMappend ::
    FirstMappend.First' a
    -> FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ds :: FirstMappend.First' a ds1 :: FirstMappend.First' a ->
                 case ds `cast` (FirstMappend.NTCo:First'[0] <a>_N) of wild {
                   FirstMappend.Nada -> ds1
                   FirstMappend.Only x
                   -> (FirstMappend.Only @ a x)
                        `cast`
                      (Sym (FirstMappend.NTCo:First'[0]) <a>_N) }) -}
a325a485b1707f5801bb8ff96ee41620
  getFirst' :: FirstMappend.First' a -> FirstMappend.Optional a
  RecSel FirstMappend.First'
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                FirstMappend.getFirst'1
                  `cast`
                (forall a.
                 <FirstMappend.First' a>_R
                 ->_R FirstMappend.NTCo:First'[0] <a>_N) -}
340e94db2647d1f03d5d29dda685bc2f
  getFirst'1 :: FirstMappend.First' a -> FirstMappend.First' a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ds :: FirstMappend.First' a -> ds) -}
cd54bb5ff65154787ac974614d095994
  monoidAssoc ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   $dEq :: GHC.Classes.Eq m
                   $dMonoid :: GHC.Base.Monoid m
                   a :: m
                   b :: m
                   c :: m ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend
                      @ m
                      $dMonoid
                      a
                      (GHC.Base.mappend @ m $dMonoid b c))
                   (GHC.Base.mappend
                      @ m
                      $dMonoid
                      (GHC.Base.mappend @ m $dMonoid a b)
                      c)) -}
cb2e4913dd2103279a5456f68139385e
  monoidLeftIdentity ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) => m -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   $dEq :: GHC.Classes.Eq m
                   $dMonoid :: GHC.Base.Monoid m
                   m1 :: m ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend @ m $dMonoid m1 (GHC.Base.mempty @ m $dMonoid))
                   m1) -}
7f4f233de0e00f77677c0c6a0f214596
  monoidRightIdentity ::
    (GHC.Classes.Eq m, GHC.Base.Monoid m) => m -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   $dEq :: GHC.Classes.Eq m
                   $dMonoid :: GHC.Base.Monoid m
                   m1 :: m ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (GHC.Base.mappend @ m $dMonoid (GHC.Base.mempty @ m $dMonoid) m1)
                   m1) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [FirstMappend.First']
  = FirstMappend.$fArbitraryFirst'
instance GHC.Classes.Eq [FirstMappend.First']
  = FirstMappend.$fEqFirst'
instance GHC.Classes.Eq [FirstMappend.Optional]
  = FirstMappend.$fEqOptional
instance GHC.Base.Monoid [FirstMappend.First']
  = FirstMappend.$fMonoidFirst'
instance GHC.Show.Show [FirstMappend.First']
  = FirstMappend.$fShowFirst'
instance GHC.Show.Show [FirstMappend.Optional]
  = FirstMappend.$fShowOptional
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

