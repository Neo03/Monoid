
==================== FINAL INTERFACE ====================
2017-09-29 11:56:23.941365 UTC

interface Monoi_36px53ZPhG84BimjxB5yeC:Ident 7103
  interface hash: ebf4f861066688e308c5ada11a00a3fe
  ABI hash: 115d2e6dc35bc969ba4552c46a6130d7
  export-list hash: 626af6678aa915cddb229653dfd8cbd1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ident.semigroupIdentAssoc
  Ident.Identity{Ident.Identity}
  Ident.IdentityAssoc
module dependencies:
package dependencies: QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      array-0.5.1.1@array_GYDb2ArsFSSIHqSGBYOjLV base-4.8.2.0*
                      binary-0.8.3.0@binar_HgfnugDrjlN23m2aiAUfJZ
                      bytestring-0.10.8.1@bytes_3TyVKV2NA2yDNWNtA3XuhS
                      containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe
                      deepseq-1.4.2.0@deeps_5CvZ3NruJCLG6fI7ct2neg
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.6.1@hasha_EEi7m9vZzBxBk2VLNi3oLU integer-gmp-1.0.0.0
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.2.0@primi_3TuOs80vGzIBbdFePa9jNW
                      random-1.1@rando_ErsaxGdx2qN9xGxJzmzYmh
                      semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp*
                      tagged-0.8.5@tagge_HDgkupRsqP51Dl3VYHbacM template-haskell-2.10.0.0
                      text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9
                      tf-random-0.5@tfran_0KoOJ8vyUWi63yKroqCxAy
                      time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV
                      transformers-0.5.2.0@trans_0oxumI52RQNEUg5dM0tOmZ
                      unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.8.3.0@binar_HgfnugDrjlN23m2aiAUfJZ:Data.Binary.Generic
         bytestring-0.10.8.1@bytes_3TyVKV2NA2yDNWNtA3XuhS:Data.ByteString.Builder
         hashable-1.2.6.1@hasha_EEi7m9vZzBxBk2VLNi3oLU:Data.Hashable.Generic
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Lazy
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Show
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.Format.Parse
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@trans_0oxumI52RQNEUg5dM0tOmZ:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.IntMap.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.IntSet.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Map.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Sequence
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primi_3TuOs80vGzIBbdFePa9jNW:Control.Monad.Primitive
                         semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.List.NonEmpty
                         semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.Semigroup
                         tagged-0.8.5@tagge_HDgkupRsqP51Dl3VYHbacM:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text
                         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD:Data.HashSet
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck 418c727fda07763ee8c9886421683eb3
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck.Arbitrary 8fd714c1aa0b696271aa178223178a73
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.Semigroup ab01b5704defdf2bfd4bd9d2261dc02e
8c17fbb7c41b6517c4ae2e105d41a888
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Ident.Identity a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a.
                  @ (Ident.Identity a)
                  (Ident.$fArbitraryIdentity_$carbitrary @ a $dArbitrary)
                  (Ident.$fArbitraryIdentity_$cshrink @ a $dArbitrary) -}
aebd7f587436d91341f68ae26fa38610
  $fArbitraryIdentity1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a
                   eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                   `cast`
                 (Test.QuickCheck.Gen.NTCo:Gen[0] <a>_R)
                   (case eta
                           `cast`
                         (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww1
                           ww2
                           ww3
                           ww4 of ww7 { (#,#) ww8 ww9 ->
                    ww8 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) } })
                   eta1) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fArbitraryIdentity_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (Ident.Identity a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Ident.$fArbitraryIdentity1
                  `cast`
                (forall a.
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               (Ident.NTCo:Identity[0] <a>_R))) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fArbitraryIdentity_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Ident.Identity a -> [Ident.Identity a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a
                   ds1 :: Ident.Identity a ->
                 GHC.Types.[] @ (Ident.Identity a)) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fEqIdentity ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Ident.Identity a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (Ident.Identity a)
                  (Ident.$fEqIdentity_$c== @ a $dEq)
                  (Ident.$fEqIdentity_$c/= @ a $dEq) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fEqIdentity_$c/= ::
    GHC.Classes.Eq a =>
    Ident.Identity a -> Ident.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(A,U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes./=
                  `cast`
                (forall a.
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Ident.NTCo:Identity[0] <a>_R)
                 ->_R Sym (Ident.NTCo:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fEqIdentity_$c== ::
    GHC.Classes.Eq a =>
    Ident.Identity a -> Ident.Identity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),U(U,A)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.==
                  `cast`
                (forall a.
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Ident.NTCo:Identity[0] <a>_R)
                 ->_R Sym (Ident.NTCo:Identity[0] <a>_R)
                 ->_R <GHC.Types.Bool>_R) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fSemigroupIdentity ::
    Data.Semigroup.Semigroup a =>
    Data.Semigroup.Semigroup (Ident.Identity a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dSemigroup :: Data.Semigroup.Semigroup a.
                  @ (Ident.Identity a)
                  (Ident.$fSemigroupIdentity_$c<> @ a $dSemigroup)
                  (Ident.$fSemigroupIdentity_$csconcat @ a $dSemigroup)
                  (Ident.$fSemigroupIdentity_$cstimes @ a $dSemigroup) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fSemigroupIdentity1 ::
    Data.Semigroup.Semigroup a =>
    Ident.Identity a -> Ident.Identity a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   $dSemigroup :: Data.Semigroup.Semigroup a
                   ds :: Ident.Identity a
                   ds1 :: Ident.Identity a ->
                 Data.Semigroup.<>
                   @ a
                   $dSemigroup
                   ds `cast` (Ident.NTCo:Identity[0] <a>_R)
                   ds1 `cast` (Ident.NTCo:Identity[0] <a>_R)) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fSemigroupIdentity_$c<> ::
    Data.Semigroup.Semigroup a =>
    Ident.Identity a -> Ident.Identity a -> Ident.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Ident.$fSemigroupIdentity1
                  `cast`
                (forall a.
                 <Data.Semigroup.Semigroup a>_R
                 ->_R <Ident.Identity a>_R
                 ->_R <Ident.Identity a>_R
                 ->_R Sym (Ident.NTCo:Identity[0] <a>_R)) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fSemigroupIdentity_$csconcat ::
    Data.Semigroup.Semigroup a =>
    Data.List.NonEmpty.NonEmpty (Ident.Identity a) -> Ident.Identity a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   w :: Data.Semigroup.Semigroup a
                   w1 :: Data.List.NonEmpty.NonEmpty (Ident.Identity a) ->
                 case w1 of ww { Data.List.NonEmpty.:| ww1 ww2 ->
                 Ident.$w$csconcat @ a w ww1 ww2 }) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fSemigroupIdentity_$cstimes ::
    Data.Semigroup.Semigroup a =>
    forall b.
    GHC.Real.Integral b =>
    b -> Ident.Identity a -> Ident.Identity a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(U,U,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   $dSemigroup :: Data.Semigroup.Semigroup a
                   @ b
                   $dIntegral :: GHC.Real.Integral b
                   eta :: b
                   eta1 :: Ident.Identity a ->
                 let {
                   $dReal :: GHC.Real.Real b = GHC.Real.$p1Integral @ b $dIntegral
                 } in
                 case GHC.Classes.<=
                        @ b
                        (GHC.Real.$p2Real @ b $dReal)
                        eta
                        (GHC.Num.fromInteger
                           @ b
                           (GHC.Real.$p1Real @ b $dReal)
                           __integer 0) of wild {
                   GHC.Types.False
                   -> let {
                        $dReal1 :: GHC.Real.Real b = GHC.Real.$p1Integral @ b $dIntegral
                      } in
                      let {
                        $dEnum :: GHC.Enum.Enum b = GHC.Real.$p2Integral @ b $dIntegral
                      } in
                      let {
                        a31 :: GHC.Classes.Ord b = GHC.Real.$p2Real @ b $dReal1
                      } in
                      let {
                        $dEq :: GHC.Classes.Eq b = GHC.Classes.$p1Ord @ b a31
                      } in
                      let {
                        $dNum :: GHC.Num.Num b = GHC.Real.$p1Real @ b $dReal1
                      } in
                      letrec {
                        f :: Ident.Identity a -> b -> Ident.Identity a {- Arity: 2 -}
                        = \ x :: Ident.Identity a y :: b ->
                          case GHC.Real.even @ b $dIntegral y of wild1 {
                            GHC.Types.False
                            -> case GHC.Classes.==
                                      @ b
                                      $dEq
                                      y
                                      (GHC.Num.fromInteger @ b $dNum __integer 1) of wild2 {
                                 GHC.Types.False
                                 -> let {
                                      $dReal2 :: GHC.Real.Real b
                                      = GHC.Real.$p1Integral @ b $dIntegral
                                    } in
                                    let {
                                      $dEnum1 :: GHC.Enum.Enum b
                                      = GHC.Real.$p2Integral @ b $dIntegral
                                    } in
                                    let {
                                      a32 :: GHC.Classes.Ord b = GHC.Real.$p2Real @ b $dReal2
                                    } in
                                    let {
                                      $dEq1 :: GHC.Classes.Eq b = GHC.Classes.$p1Ord @ b a32
                                    } in
                                    let {
                                      $dNum1 :: GHC.Num.Num b = GHC.Real.$p1Real @ b $dReal2
                                    } in
                                    letrec {
                                      g :: Ident.Identity a
                                           -> b -> Ident.Identity a -> Ident.Identity a
                                        {- Arity: 3 -}
                                      = \ x1 :: Ident.Identity a y1 :: b z :: Ident.Identity a ->
                                        case GHC.Real.even @ b $dIntegral y1 of wild3 {
                                          GHC.Types.False
                                          -> case GHC.Classes.==
                                                    @ b
                                                    $dEq1
                                                    y1
                                                    (GHC.Num.fromInteger
                                                       @ b
                                                       $dNum1
                                                       __integer 1) of wild4 {
                                               GHC.Types.False
                                               -> g (Ident.$fSemigroupIdentity_$c<>
                                                       @ a
                                                       $dSemigroup
                                                       x1
                                                       x1)
                                                    (GHC.Real.quot
                                                       @ b
                                                       $dIntegral
                                                       (GHC.Enum.pred @ b $dEnum1 y1)
                                                       (GHC.Num.fromInteger @ b $dNum1 __integer 2))
                                                    (Ident.$fSemigroupIdentity_$c<>
                                                       @ a
                                                       $dSemigroup
                                                       x1
                                                       z)
                                               GHC.Types.True
                                               -> Ident.$fSemigroupIdentity_$c<>
                                                    @ a
                                                    $dSemigroup
                                                    x1
                                                    z }
                                          GHC.Types.True
                                          -> g (Ident.$fSemigroupIdentity_$c<>
                                                  @ a
                                                  $dSemigroup
                                                  x1
                                                  x1)
                                               (GHC.Real.quot
                                                  @ b
                                                  $dIntegral
                                                  y1
                                                  (GHC.Num.fromInteger @ b $dNum1 __integer 2))
                                               z }
                                    } in
                                    g (Ident.$fSemigroupIdentity_$c<> @ a $dSemigroup x x)
                                      (GHC.Real.quot
                                         @ b
                                         $dIntegral
                                         (GHC.Enum.pred @ b $dEnum y)
                                         (GHC.Num.fromInteger @ b $dNum __integer 2))
                                      x
                                 GHC.Types.True -> x }
                            GHC.Types.True
                            -> f (Ident.$fSemigroupIdentity_$c<> @ a $dSemigroup x x)
                                 (GHC.Real.quot
                                    @ b
                                    $dIntegral
                                    y
                                    (GHC.Num.fromInteger @ b $dNum __integer 2)) }
                      } in
                      f eta1 eta
                   GHC.Types.True
                   -> GHC.Err.error
                        @ (Ident.Identity a)
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b1 ->
                            GHC.CString.unpackFoldrCString#
                              @ b1
                              "stimes: positive multiplier expected"#)) }) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fShowIdentity ::
    GHC.Show.Show a => GHC.Show.Show (Ident.Identity a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Ident.Identity a)
                  (Ident.$fShowIdentity_$cshowsPrec @ a $dShow)
                  (Ident.$fShowIdentity_$cshow @ a $dShow)
                  (Ident.$fShowIdentity_$cshowList @ a $dShow) -}
a8ea7f3f543457b8683ca8d961c4cb61
  $fShowIdentity1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
d1169f823986afaf8f8640d9a54ce72d
  $fShowIdentity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Identity "#) -}
15d59803e4717d858533644efbd0653b
  $fShowIdentity3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => Ident.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dShow :: GHC.Show.Show a x :: Ident.Identity a ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Ident.$fShowIdentity2)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow
                      Ident.$fShowIdentity3
                      x `cast` (Ident.NTCo:Identity[0] <a>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a => [Ident.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Ident.Identity a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Ident.Identity a)
                   (Ident.$fShowIdentity_$cshowsPrec @ a $dShow Ident.$fShowIdentity1)
                   eta
                   eta1) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Ident.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   w :: GHC.Show.Show a
                   w1 :: GHC.Types.Int
                   w2 :: Ident.Identity a ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Ident.$w$cshowsPrec @ a w ww1 w2 }) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $w$csconcat ::
    Data.Semigroup.Semigroup a =>
    Ident.Identity a -> [Ident.Identity a] -> Ident.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   w :: Data.Semigroup.Semigroup a
                   ww :: Ident.Identity a
                   ww1 :: [Ident.Identity a] ->
                 letrec {
                   go :: Ident.Identity a -> [Ident.Identity a] -> Ident.Identity a
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ b :: Ident.Identity a ds1 :: [Ident.Identity a] ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> (Data.Semigroup.<>
                             @ a
                             w
                             b `cast` (Ident.NTCo:Identity[0] <a>_R)
                             (go c cs) `cast` (Ident.NTCo:Identity[0] <a>_R))
                            `cast`
                          (Sym (Ident.NTCo:Identity[0] <a>_R)) }
                 } in
                 go ww ww1) -}
8c17fbb7c41b6517c4ae2e105d41a888
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Ident.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: GHC.Show.Show a
                   ww :: GHC.Prim.Int#
                   w1 :: Ident.Identity a ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Ident.$fShowIdentity3
                       w1 `cast` (Ident.NTCo:Identity[0] <a>_R)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char Ident.$fShowIdentity2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Ident.$fShowIdentity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
8c17fbb7c41b6517c4ae2e105d41a888
  newtype Identity a = Identity a
    Promotable
28d6ae137a0ce7d47418f48cb28b0771
  type IdentityAssoc =
    Ident.Identity GHC.Base.String
    -> Ident.Identity GHC.Base.String
    -> Ident.Identity GHC.Base.String
    -> GHC.Types.Bool
5fd9ace4f7667cd7a65c4e15fc802000
  semigroupIdentAssoc ::
    (GHC.Classes.Eq m, Data.Semigroup.Semigroup m) =>
    m -> m -> m -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(C(C1(U)),A,A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m
                   $dEq :: GHC.Classes.Eq m
                   $dSemigroup :: Data.Semigroup.Semigroup m
                   a :: m
                   b :: m
                   c :: m ->
                 GHC.Classes.==
                   @ m
                   $dEq
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      a
                      (Data.Semigroup.<> @ m $dSemigroup b c))
                   (Data.Semigroup.<>
                      @ m
                      $dSemigroup
                      (Data.Semigroup.<> @ m $dSemigroup a b)
                      c)) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Ident.Identity]
  = Ident.$fArbitraryIdentity
instance GHC.Classes.Eq [Ident.Identity] = Ident.$fEqIdentity
instance Data.Semigroup.Semigroup [Ident.Identity]
  = Ident.$fSemigroupIdentity
instance GHC.Show.Show [Ident.Identity] = Ident.$fShowIdentity
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

