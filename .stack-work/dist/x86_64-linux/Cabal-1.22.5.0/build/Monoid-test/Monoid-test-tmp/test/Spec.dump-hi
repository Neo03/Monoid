
==================== FINAL INTERFACE ====================
2017-10-05 09:53:54.854697 UTC

interface main@main:Main 7103
  interface hash: aa853f4787f7c49e17f82a99485d6b23
  ABI hash: cf9637d6cef83205935a1f26330d413a
  export-list hash: f5828be9862c402a6492c94c63dc9328
  orphan hash: 95d0211391f0980e521ce084eede40ed
  flag hash: 8a641cc7424fb0224cd12f7ad18774db
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC
                      QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      array-0.5.1.1@array_GYDb2ArsFSSIHqSGBYOjLV base-4.8.2.0*
                      binary-0.8.3.0@binar_HgfnugDrjlN23m2aiAUfJZ
                      bytestring-0.10.8.1@bytes_3TyVKV2NA2yDNWNtA3XuhS
                      containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe
                      deepseq-1.4.2.0@deeps_5CvZ3NruJCLG6fI7ct2neg
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.6.1@hasha_EEi7m9vZzBxBk2VLNi3oLU integer-gmp-1.0.0.0
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.2.0@primi_3TuOs80vGzIBbdFePa9jNW
                      random-1.1@rando_ErsaxGdx2qN9xGxJzmzYmh
                      semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp
                      tagged-0.8.5@tagge_HDgkupRsqP51Dl3VYHbacM template-haskell-2.10.0.0
                      text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9
                      tf-random-0.5@tfran_0KoOJ8vyUWi63yKroqCxAy
                      time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV
                      transformers-0.5.2.0@trans_0oxumI52RQNEUg5dM0tOmZ
                      unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.8.3.0@binar_HgfnugDrjlN23m2aiAUfJZ:Data.Binary.Generic
         bytestring-0.10.8.1@bytes_3TyVKV2NA2yDNWNtA3XuhS:Data.ByteString.Builder
         hashable-1.2.6.1@hasha_EEi7m9vZzBxBk2VLNi3oLU:Data.Hashable.Generic
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Lazy
         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Show
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.Format.Parse
         time-1.6.0.1@time_8x65OU2SQ5BFIOPjfj6jKV:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@trans_0oxumI52RQNEUg5dM0tOmZ:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.IntMap.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.IntSet.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Map.Base
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Sequence
                         containers-0.5.7.1@conta_1Ytulk3jFnTKjdQHzgjLXe:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primi_3TuOs80vGzIBbdFePa9jNW:Control.Monad.Primitive
                         semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.List.NonEmpty
                         semigroups-0.18.3@semig_4E1BA0zXONICIrUp4bqWLp:Data.Semigroup
                         tagged-0.8.5@tagge_HDgkupRsqP51Dl3VYHbacM:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text
                         text-1.2.2.2@text_4hRuWAoCJN19z5QMMbAWP9:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unord_IzUTur3c2ed8LmekpyssGD:Data.HashSet
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Acboth 56baf5fba1104db8e42a414a3a5c9e0a
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Accum 05292eb61506bced7494316e3b5d4146
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:BoolConj 5bf2525c8445cc9d2b3be3e97a66b9a2
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:BoolDisj c1c47dfef3b596e3d29feeefcc3cf065
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Combine 1a06d53f2f38e2e06b238d2be9455645
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Comp 11ee450960dc6eedcb2f67187616a2e5
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:FirstMappend 5ac0beaf8e20b1c88b0cb0a7ef270b94
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Four 4cfca8e4ec1de246ad8ea9203d63770d
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Ident 115d2e6dc35bc969ba4552c46a6130d7
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Or 589e1e067697a2f4b7e1115db345e612
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Three 0378094b4d7c04aa94ec6c2fc1fbc518
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Trivial d45d6d29180e80f6e784747132be2d8c
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Two 3a57d6061c82d5811d35a13606d2a5aa
import  -/  Monoid-0.1.0.0@Monoi_36px53ZPhG84BimjxB5yeC:Validation 09b4f56834b8eb53b7971e104e987236
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck 418c727fda07763ee8c9886421683eb3
import  -/  QuickCheck-2.9.2@Quick_5IymKNgsgA72GSlwuxKpKQ:Test.QuickCheck.Test 2c4f23d680e8d74cae4b2b1a82364b0f
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
f539e710ea13b9a50ac1a1ac3fd55c2c
  $s$fArbitraryAccumulateBoth1 ::
    Acboth.AccumulateBoth [GHC.Types.Char] GHC.Types.Ordering
    -> [Acboth.AccumulateBoth [GHC.Types.Char] GHC.Types.Ordering]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Acboth.AccumulateBoth
                            [GHC.Types.Char] GHC.Types.Ordering ->
                 GHC.Types.[]
                   @ (Acboth.AccumulateBoth [GHC.Types.Char] GHC.Types.Ordering)) -}
3592aa2731048500c9248d996a3ef83d
  $s$fArbitraryAccumulateBoth3 ::
    [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ xs :: [GHC.Types.Char] ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                   xs) -}
2ab48acaf5287210390ddb4245a7d817
  $s$fArbitraryAccumulateBoth_$s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Char]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Test.QuickCheck.Arbitrary.$fArbitrary[]_$carbitrary
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                  Main.$s$fArbitraryAccumulateBoth3 -}
6839118ba642c0da77e07c82780bf56a
  $s$fArbitraryAccumulateRight1 ::
    Accum.AccumulateRight [GHC.Types.Char] GHC.Types.Ordering
    -> [Accum.AccumulateRight [GHC.Types.Char] GHC.Types.Ordering]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Accum.AccumulateRight
                            [GHC.Types.Char] GHC.Types.Ordering ->
                 GHC.Types.[]
                   @ (Accum.AccumulateRight [GHC.Types.Char] GHC.Types.Ordering)) -}
ee6c9ededff584a4fbefc06a636366b6
  $s$fArbitraryCombine1 ::
    Combine.Combine GHC.Types.Int [GHC.Types.Char]
    -> [Combine.Combine GHC.Types.Int [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Combine.Combine GHC.Types.Int [GHC.Types.Char] ->
                 GHC.Types.[] @ (Combine.Combine GHC.Types.Int [GHC.Types.Char])) -}
de7e4da5de3c09f59c0440896b0b637f
  $s$fArbitraryComp1 ::
    Comp.Comp [GHC.Types.Char] -> [Comp.Comp [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Comp.Comp [GHC.Types.Char] ->
                 GHC.Types.[] @ (Comp.Comp [GHC.Types.Char])) -}
e19a58461dd13cf5647b3b6f6b6e8367
  $s$fArbitraryFirst'1 ::
    FirstMappend.First' [GHC.Types.Char]
    -> [FirstMappend.First' [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: FirstMappend.First' [GHC.Types.Char] ->
                 GHC.Types.[] @ (FirstMappend.First' [GHC.Types.Char])) -}
63f1ef87ddd17a2b6ea3d2f46ea8aa66
  $s$fArbitraryFour1 ::
    Four.Four
      [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]
    -> [Four.Four
          [GHC.Types.Char]
          [GHC.Types.Char]
          [GHC.Types.Char]
          [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Four.Four
                            [GHC.Types.Char]
                            [GHC.Types.Char]
                            [GHC.Types.Char]
                            [GHC.Types.Char] ->
                 GHC.Types.[]
                   @ (Four.Four
                        [GHC.Types.Char]
                        [GHC.Types.Char]
                        [GHC.Types.Char]
                        [GHC.Types.Char])) -}
457c4b4840fc22d202eaeb949e81a353
  $s$fArbitraryIdentity1 ::
    Ident.Identity [GHC.Types.Char]
    -> [Ident.Identity [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Ident.Identity [GHC.Types.Char] ->
                 GHC.Types.[] @ (Ident.Identity [GHC.Types.Char])) -}
a3c335a781b6d9abf4a460d5ebfc9c24
  $s$fArbitraryOr1 ::
    Or.Or [GHC.Types.Char] GHC.Types.Ordering
    -> [Or.Or [GHC.Types.Char] GHC.Types.Ordering]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Or.Or [GHC.Types.Char] GHC.Types.Ordering ->
                 GHC.Types.[] @ (Or.Or [GHC.Types.Char] GHC.Types.Ordering)) -}
7cae89557a6e79d00184c7cc31b9d2a6
  $s$fArbitraryThree1 ::
    Three.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]
    -> [Three.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Three.Three
                            [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char] ->
                 GHC.Types.[]
                   @ (Three.Three
                        [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char])) -}
70076b7d8df7f307d2015e5d1120ad24
  $s$fArbitraryTwo1 ::
    Two.Two [GHC.Types.Char] [GHC.Types.Char]
    -> [Two.Two [GHC.Types.Char] [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Two.Two [GHC.Types.Char] [GHC.Types.Char] ->
                 GHC.Types.[] @ (Two.Two [GHC.Types.Char] [GHC.Types.Char])) -}
87957254490dd30869433723a253b589
  $s$fArbitraryValidation1 ::
    Validation.Validation [GHC.Types.Char] GHC.Types.Ordering
    -> [Validation.Validation [GHC.Types.Char] GHC.Types.Ordering]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds1 :: Validation.Validation
                            [GHC.Types.Char] GHC.Types.Ordering ->
                 GHC.Types.[]
                   @ (Validation.Validation [GHC.Types.Char] GHC.Types.Ordering)) -}
f0ce600143ea1a25d6d0385af125e412
  $s$fEqAccumulateBoth1 :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
954f0da8c05672248ca742d109baf0f8
  $s$fShowAccumulateBoth ::
    GHC.Show.Show
      (Acboth.AccumulateBoth [GHC.Types.Char] GHC.Types.Ordering)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Acboth.AccumulateBoth [GHC.Types.Char] GHC.Types.Ordering)
                  (Acboth.$fShowAccumulateBoth_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Ordering
                     Main.$s$fShowAccumulateBoth3
                     GHC.Show.$fShowOrdering)
                  (Acboth.$fShowAccumulateBoth_$cshow
                     @ [GHC.Types.Char]
                     @ GHC.Types.Ordering
                     Main.$s$fShowAccumulateBoth3
                     GHC.Show.$fShowOrdering)
                  Main.$s$fShowAccumulateBoth1 -}
3c56d6636ee48939d6fe83fe9590402b
  $s$fShowAccumulateBoth1 ::
    [Acboth.AccumulateBoth [GHC.Types.Char] GHC.Types.Ordering]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Acboth.AccumulateBoth
                             [GHC.Types.Char] GHC.Types.Ordering]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Acboth.AccumulateBoth [GHC.Types.Char] GHC.Types.Ordering)
                   Main.$s$fShowAccumulateBoth2
                   eta
                   eta1) -}
1fb392b6d7a00dfeb417d6d85c3b81c3
  $s$fShowAccumulateBoth2 ::
    Acboth.AccumulateBoth [GHC.Types.Char] GHC.Types.Ordering
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w3 :: Acboth.AccumulateBoth
                           [GHC.Types.Char] GHC.Types.Ordering ->
                 Acboth.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ GHC.Types.Ordering
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShowOrdering
                   0
                   w3) -}
5ba183d0138afe03c04f5dff373a9c3c
  $s$fShowAccumulateBoth3 :: GHC.Show.Show [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
88864636d526e83c7117c31af2dc17dd
  $s$fShowAccumulateRight ::
    GHC.Show.Show
      (Accum.AccumulateRight [GHC.Types.Char] GHC.Types.Ordering)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Accum.AccumulateRight [GHC.Types.Char] GHC.Types.Ordering)
                  (Accum.$fShowAccumulateRight_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Ordering
                     Main.$s$fShowAccumulateBoth3
                     GHC.Show.$fShowOrdering)
                  (Accum.$fShowAccumulateRight_$cshow
                     @ [GHC.Types.Char]
                     @ GHC.Types.Ordering
                     Main.$s$fShowAccumulateBoth3
                     GHC.Show.$fShowOrdering)
                  Main.$s$fShowAccumulateRight1 -}
ac81ba8ec91edda5d8fd4debd10cddf1
  $s$fShowAccumulateRight1 ::
    [Accum.AccumulateRight [GHC.Types.Char] GHC.Types.Ordering]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Accum.AccumulateRight
                             [GHC.Types.Char] GHC.Types.Ordering]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Accum.AccumulateRight [GHC.Types.Char] GHC.Types.Ordering)
                   Main.$s$fShowAccumulateRight2
                   eta
                   eta1) -}
209bbfbecf81731b4c18e319b6d07bde
  $s$fShowAccumulateRight2 ::
    Accum.AccumulateRight [GHC.Types.Char] GHC.Types.Ordering
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w3 :: Accum.AccumulateRight
                           [GHC.Types.Char] GHC.Types.Ordering ->
                 Accum.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ GHC.Types.Ordering
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShowOrdering
                   0
                   w3) -}
6f9dedf7f6b36b59b9526fa890609ccc
  $s$fShowFirst' ::
    GHC.Show.Show (FirstMappend.First' [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (FirstMappend.First' [GHC.Types.Char])
                  (FirstMappend.$fShowFirst'_$cshowsPrec
                     @ [GHC.Types.Char]
                     Main.$s$fShowAccumulateBoth3)
                  (FirstMappend.$fShowFirst'_$cshow
                     @ [GHC.Types.Char]
                     Main.$s$fShowAccumulateBoth3)
                  Main.$s$fShowFirst'1 -}
522ad3601b7db8412902a6dcc6cd28d3
  $s$fShowFirst'1 ::
    [FirstMappend.First' [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [FirstMappend.First' [GHC.Types.Char]]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (FirstMappend.First' [GHC.Types.Char])
                   (\ w2 :: FirstMappend.First' [GHC.Types.Char] ->
                    FirstMappend.$w$cshowsPrec
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      0
                      w2)
                   eta
                   eta1) -}
ccaf0d7998e098a661864bccf1e445ee
  $s$fShowFour ::
    GHC.Show.Show
      (Four.Four
         [GHC.Types.Char]
         [GHC.Types.Char]
         [GHC.Types.Char]
         [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Four.Four
                       [GHC.Types.Char]
                       [GHC.Types.Char]
                       [GHC.Types.Char]
                       [GHC.Types.Char])
                  (Four.$fShowFour_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     Main.$s$fShowAccumulateBoth3
                     Main.$s$fShowAccumulateBoth3
                     Main.$s$fShowAccumulateBoth3
                     Main.$s$fShowAccumulateBoth3)
                  Main.$s$fShowFour_$s$fShowFour_$cshow
                  Main.$s$fShowFour_$s$fShowFour_$cshowList -}
de20e1a0c0bc3726d500366c90ba91ac
  $s$fShowFour_$s$fShowFour_$cshow ::
    Four.Four
      [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Four.Four
                          [GHC.Types.Char]
                          [GHC.Types.Char]
                          [GHC.Types.Char]
                          [GHC.Types.Char] ->
                 Four.$fShowFour_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   Main.$s$fShowAccumulateBoth3
                   Main.$s$fShowAccumulateBoth3
                   Main.$s$fShowAccumulateBoth3
                   Main.$s$fShowAccumulateBoth3
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ae24367dc22ca9e617358be205fa7a38
  $s$fShowFour_$s$fShowFour_$cshowList ::
    [Four.Four
       [GHC.Types.Char]
       [GHC.Types.Char]
       [GHC.Types.Char]
       [GHC.Types.Char]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [Four.Four
                             [GHC.Types.Char]
                             [GHC.Types.Char]
                             [GHC.Types.Char]
                             [GHC.Types.Char]]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Four.Four
                        [GHC.Types.Char]
                        [GHC.Types.Char]
                        [GHC.Types.Char]
                        [GHC.Types.Char])
                   (Four.$fShowFour_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      Main.$s$fShowAccumulateBoth3
                      Main.$s$fShowAccumulateBoth3
                      Main.$s$fShowAccumulateBoth3
                      Main.$s$fShowAccumulateBoth3
                      Four.$fShowFour1)
                   eta
                   eta1) -}
4a807ffdb8ffae9e50eb570d25db090e
  $s$fShowIdentity :: GHC.Show.Show (Ident.Identity [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Ident.Identity [GHC.Types.Char])
                  (Ident.$fShowIdentity_$cshowsPrec
                     @ [GHC.Types.Char]
                     Main.$s$fShowAccumulateBoth3)
                  Main.$s$fShowIdentity2
                  Main.$s$fShowIdentity1 -}
1a2620ee78d791ef27304df5d27af2a3
  $s$fShowIdentity1 ::
    [Ident.Identity [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [Ident.Identity [GHC.Types.Char]]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Ident.Identity [GHC.Types.Char])
                   (\ w2 :: Ident.Identity [GHC.Types.Char] ->
                    Ident.$w$cshowsPrec
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      0
                      w2)
                   eta
                   eta1) -}
ba95621da389a54312c393fcf3183e6b
  $s$fShowIdentity2 ::
    Ident.Identity [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Ident.Identity [GHC.Types.Char] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Ident.$fShowIdentity2)
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         x `cast` (Ident.NTCo:Identity[0] <[GHC.Types.Char]>_R)
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.[] @ GHC.Types.Char))))) -}
50192b0926ce57b0a72bacb413a143ee
  $s$fShowOr ::
    GHC.Show.Show (Or.Or [GHC.Types.Char] GHC.Types.Ordering)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Or.Or [GHC.Types.Char] GHC.Types.Ordering)
                  (Or.$fShowOr_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Ordering
                     Main.$s$fShowAccumulateBoth3
                     GHC.Show.$fShowOrdering)
                  (Or.$fShowOr_$cshow
                     @ [GHC.Types.Char]
                     @ GHC.Types.Ordering
                     Main.$s$fShowAccumulateBoth3
                     GHC.Show.$fShowOrdering)
                  Main.$s$fShowOr1 -}
ceb2c663f61f66498cf4ceeaeb5cb5cc
  $s$fShowOr1 ::
    [Or.Or [GHC.Types.Char] GHC.Types.Ordering] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Or.Or [GHC.Types.Char] GHC.Types.Ordering]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Or.Or [GHC.Types.Char] GHC.Types.Ordering)
                   Main.$s$fShowOr2
                   eta
                   eta1) -}
4fdcf0ae79de6921082f6c418eb47466
  $s$fShowOr2 ::
    Or.Or [GHC.Types.Char] GHC.Types.Ordering -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w3 :: Or.Or [GHC.Types.Char] GHC.Types.Ordering ->
                 Or.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ GHC.Types.Ordering
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShowOrdering
                   0
                   w3) -}
d1f4c4263d90b584bee1d0c0ec5ef6db
  $s$fShowThree ::
    GHC.Show.Show
      (Three.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Three.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char])
                  (Three.$fShowThree_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     Main.$s$fShowAccumulateBoth3
                     Main.$s$fShowAccumulateBoth3
                     Main.$s$fShowAccumulateBoth3)
                  Main.$s$fShowThree_$s$fShowThree_$cshow
                  Main.$s$fShowThree_$s$fShowThree_$cshowList -}
df9013678e780bd35066c39600f0c009
  $s$fShowThree_$s$fShowThree_$cshow ::
    Three.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Three.Three
                          [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char] ->
                 Three.$fShowThree_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   Main.$s$fShowAccumulateBoth3
                   Main.$s$fShowAccumulateBoth3
                   Main.$s$fShowAccumulateBoth3
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9219b799b7464b0a5c6c15e59b9577d3
  $s$fShowThree_$s$fShowThree_$cshowList ::
    [Three.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [Three.Three
                             [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char]]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Three.Three [GHC.Types.Char] [GHC.Types.Char] [GHC.Types.Char])
                   (Three.$fShowThree_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      Main.$s$fShowAccumulateBoth3
                      Main.$s$fShowAccumulateBoth3
                      Main.$s$fShowAccumulateBoth3
                      Three.$fShowThree1)
                   eta
                   eta1) -}
c90cf45e1b53528a145ccd338b79f259
  $s$fShowTwo ::
    GHC.Show.Show (Two.Two [GHC.Types.Char] [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Two.Two [GHC.Types.Char] [GHC.Types.Char])
                  (Two.$fShowTwo_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     Main.$s$fShowAccumulateBoth3
                     Main.$s$fShowAccumulateBoth3)
                  Main.$s$fShowTwo_$s$fShowTwo_$cshow
                  Main.$s$fShowTwo1 -}
f9ffd3b95e38498154fdcb14a48a92bd
  $s$fShowTwo1 ::
    [Two.Two [GHC.Types.Char] [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Two.Two [GHC.Types.Char] [GHC.Types.Char]]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Two.Two [GHC.Types.Char] [GHC.Types.Char])
                   Main.$s$fShowTwo2
                   eta
                   eta1) -}
4bd5204fa6d917fb8f83873ebabc3083
  $s$fShowTwo2 ::
    Two.Two [GHC.Types.Char] [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w3 :: Two.Two [GHC.Types.Char] [GHC.Types.Char] ->
                 case w3 of ww2 { Two.Two ww3 ww4 ->
                 Two.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   0
                   ww3
                   ww4 }) -}
da5b89105cc20bcc55dee2944f4df2cc
  $s$fShowTwo_$s$fShowTwo_$cshow ::
    Two.Two [GHC.Types.Char] [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Two.Two [GHC.Types.Char] [GHC.Types.Char] ->
                 Two.$fShowTwo_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   Main.$s$fShowAccumulateBoth3
                   Main.$s$fShowAccumulateBoth3
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4a50b461c461b1bad887f1626a2804c1
  $s$fShowValidation ::
    GHC.Show.Show
      (Validation.Validation [GHC.Types.Char] GHC.Types.Ordering)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Validation.Validation [GHC.Types.Char] GHC.Types.Ordering)
                  (Validation.$fShowValidation_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Ordering
                     Main.$s$fShowAccumulateBoth3
                     GHC.Show.$fShowOrdering)
                  (Validation.$fShowValidation_$cshow
                     @ [GHC.Types.Char]
                     @ GHC.Types.Ordering
                     Main.$s$fShowAccumulateBoth3
                     GHC.Show.$fShowOrdering)
                  Main.$s$fShowValidation1 -}
44ac4582171a164b202dcd11bd03a96a
  $s$fShowValidation1 ::
    [Validation.Validation [GHC.Types.Char] GHC.Types.Ordering]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Validation.Validation
                             [GHC.Types.Char] GHC.Types.Ordering]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Validation.Validation [GHC.Types.Char] GHC.Types.Ordering)
                   Main.$s$fShowValidation2
                   eta
                   eta1) -}
48aa5eab7655aca13a44b4a9b577dc0c
  $s$fShowValidation2 ::
    Validation.Validation [GHC.Types.Char] GHC.Types.Ordering
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w3 :: Validation.Validation
                           [GHC.Types.Char] GHC.Types.Ordering ->
                 Validation.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ GHC.Types.Ordering
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShowOrdering
                   0
                   w3) -}
3b6e1e662a824162508d7da27519c122
  $smonoidRightIdentity ::
    FirstMappend.First' GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ m1 :: FirstMappend.First' GHC.Base.String ->
                 FirstMappend.$fEqFirst'_$c==
                   @ [GHC.Types.Char]
                   Main.$s$fEqAccumulateBoth1
                   (FirstMappend.$fMonoidFirst'_$cmappend
                      @ [GHC.Types.Char]
                      (FirstMappend.Nada @ [GHC.Types.Char])
                        `cast`
                      (Sym (FirstMappend.NTCo:First'[0]) <[GHC.Types.Char]>_N)
                      m1)
                   m1) -}
ee6590a2ab0ffaa5074d93f2d3fc4c03
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e3bd864fe81295cabb6b36ca45539f6f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U> -}
20688fff09df92565d9be8c5f0313411
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
"SPEC/Main $fArbitrary[] @ Char" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                  GHC.Types.Char
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Char
                                          $dArbitrary
  = Main.$s$fArbitraryAccumulateBoth_$s$fArbitrary[]
"SPEC/Main $fShowAccumulateBoth @ [Char] @ Ordering" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                 [GHC.Types.Char]
                                                                     $dShow1 :: GHC.Show.Show
                                                                                  GHC.Types.Ordering
  Acboth.$fShowAccumulateBoth @ [GHC.Types.Char]
                              @ GHC.Types.Ordering
                              $dShow
                              $dShow1
  = Main.$s$fShowAccumulateBoth
"SPEC/Main $fShowAccumulateRight @ [Char] @ Ordering" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                  [GHC.Types.Char]
                                                                      $dShow1 :: GHC.Show.Show
                                                                                   GHC.Types.Ordering
  Accum.$fShowAccumulateRight @ [GHC.Types.Char]
                              @ GHC.Types.Ordering
                              $dShow
                              $dShow1
  = Main.$s$fShowAccumulateRight
"SPEC/Main $fShowFirst' @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                              [GHC.Types.Char]
  FirstMappend.$fShowFirst' @ [GHC.Types.Char] $dShow
  = Main.$s$fShowFirst'
"SPEC/Main $fShowFour @ [Char] @ [Char] @ [Char] @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                       [GHC.Types.Char]
                                                                           $dShow1 :: GHC.Show.Show
                                                                                        [GHC.Types.Char]
                                                                           $dShow2 :: GHC.Show.Show
                                                                                        [GHC.Types.Char]
                                                                           $dShow3 :: GHC.Show.Show
                                                                                        [GHC.Types.Char]
  Four.$fShowFour @ [GHC.Types.Char]
                  @ [GHC.Types.Char]
                  @ [GHC.Types.Char]
                  @ [GHC.Types.Char]
                  $dShow
                  $dShow1
                  $dShow2
                  $dShow3
  = Main.$s$fShowFour
"SPEC/Main $fShowFour_$cshow @ [Char] @ [Char] @ [Char] @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                              [GHC.Types.Char]
                                                                                  $dShow1 :: GHC.Show.Show
                                                                                               [GHC.Types.Char]
                                                                                  $dShow2 :: GHC.Show.Show
                                                                                               [GHC.Types.Char]
                                                                                  $dShow3 :: GHC.Show.Show
                                                                                               [GHC.Types.Char]
  Four.$fShowFour_$cshow @ [GHC.Types.Char]
                         @ [GHC.Types.Char]
                         @ [GHC.Types.Char]
                         @ [GHC.Types.Char]
                         $dShow
                         $dShow1
                         $dShow2
                         $dShow3
  = Main.$s$fShowFour_$s$fShowFour_$cshow
"SPEC/Main $fShowFour_$cshowList @ [Char] @ [Char] @ [Char] @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                  [GHC.Types.Char]
                                                                                      $dShow1 :: GHC.Show.Show
                                                                                                   [GHC.Types.Char]
                                                                                      $dShow2 :: GHC.Show.Show
                                                                                                   [GHC.Types.Char]
                                                                                      $dShow3 :: GHC.Show.Show
                                                                                                   [GHC.Types.Char]
  Four.$fShowFour_$cshowList @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             $dShow
                             $dShow1
                             $dShow2
                             $dShow3
  = Main.$s$fShowFour_$s$fShowFour_$cshowList
"SPEC/Main $fShowIdentity @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                [GHC.Types.Char]
  Ident.$fShowIdentity @ [GHC.Types.Char] $dShow
  = Main.$s$fShowIdentity
"SPEC/Main $fShowOr @ [Char] @ Ordering" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                     [GHC.Types.Char]
                                                         $dShow1 :: GHC.Show.Show GHC.Types.Ordering
  Or.$fShowOr @ [GHC.Types.Char] @ GHC.Types.Ordering $dShow $dShow1
  = Main.$s$fShowOr
"SPEC/Main $fShowThree @ [Char] @ [Char] @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                               [GHC.Types.Char]
                                                                   $dShow1 :: GHC.Show.Show
                                                                                [GHC.Types.Char]
                                                                   $dShow2 :: GHC.Show.Show
                                                                                [GHC.Types.Char]
  Three.$fShowThree @ [GHC.Types.Char]
                    @ [GHC.Types.Char]
                    @ [GHC.Types.Char]
                    $dShow
                    $dShow1
                    $dShow2
  = Main.$s$fShowThree
"SPEC/Main $fShowThree_$cshow @ [Char] @ [Char] @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                      [GHC.Types.Char]
                                                                          $dShow1 :: GHC.Show.Show
                                                                                       [GHC.Types.Char]
                                                                          $dShow2 :: GHC.Show.Show
                                                                                       [GHC.Types.Char]
  Three.$fShowThree_$cshow @ [GHC.Types.Char]
                           @ [GHC.Types.Char]
                           @ [GHC.Types.Char]
                           $dShow
                           $dShow1
                           $dShow2
  = Main.$s$fShowThree_$s$fShowThree_$cshow
"SPEC/Main $fShowThree_$cshowList @ [Char] @ [Char] @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                          [GHC.Types.Char]
                                                                              $dShow1 :: GHC.Show.Show
                                                                                           [GHC.Types.Char]
                                                                              $dShow2 :: GHC.Show.Show
                                                                                           [GHC.Types.Char]
  Three.$fShowThree_$cshowList @ [GHC.Types.Char]
                               @ [GHC.Types.Char]
                               @ [GHC.Types.Char]
                               $dShow
                               $dShow1
                               $dShow2
  = Main.$s$fShowThree_$s$fShowThree_$cshowList
"SPEC/Main $fShowTwo @ [Char] @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    [GHC.Types.Char]
                                                        $dShow1 :: GHC.Show.Show [GHC.Types.Char]
  Two.$fShowTwo @ [GHC.Types.Char] @ [GHC.Types.Char] $dShow $dShow1
  = Main.$s$fShowTwo
"SPEC/Main $fShowTwo_$cshow @ [Char] @ [Char]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                           [GHC.Types.Char]
                                                               $dShow1 :: GHC.Show.Show
                                                                            [GHC.Types.Char]
  Two.$fShowTwo_$cshow @ [GHC.Types.Char]
                       @ [GHC.Types.Char]
                       $dShow
                       $dShow1
  = Main.$s$fShowTwo_$s$fShowTwo_$cshow
"SPEC/Main $fShowValidation @ [Char] @ Ordering" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                             [GHC.Types.Char]
                                                                 $dShow1 :: GHC.Show.Show
                                                                              GHC.Types.Ordering
  Validation.$fShowValidation @ [GHC.Types.Char]
                              @ GHC.Types.Ordering
                              $dShow
                              $dShow1
  = Main.$s$fShowValidation
"SPEC/Main monoidRightIdentity @ (First' String)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                            (FirstMappend.First'
                                                                               GHC.Base.String)
                                                                  $dMonoid :: GHC.Base.Monoid
                                                                                (FirstMappend.First'
                                                                                   GHC.Base.String)
  FirstMappend.monoidRightIdentity @ (FirstMappend.First'
                                        GHC.Base.String)
                                   $dEq
                                   $dMonoid
  = Main.$smonoidRightIdentity
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

